{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeTypeDuplicates;\n\nvar _generated = require(\"../../validators/generated\");\n\nfunction removeTypeDuplicates(nodes) {\n  const generics = {};\n  const bases = {};\n  const typeGroups = new Set();\n  const types = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if ((0, _generated.isTSAnyKeyword)(node)) {\n      return [node];\n    }\n\n    if ((0, _generated.isTSBaseType)(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if ((0, _generated.isTSUnionType)(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (const type of Object.keys(bases)) {\n    types.push(bases[type]);\n  }\n\n  for (const name of Object.keys(generics)) {\n    types.push(generics[name]);\n  }\n\n  return types;\n}","map":{"version":3,"sources":["C:/Users/zhfld/git/Study_springBoot/Study_SpringBoot/src/main/webapp/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"],"names":["Object","defineProperty","exports","value","default","removeTypeDuplicates","_generated","require","nodes","generics","bases","typeGroups","Set","types","i","length","node","indexOf","isTSAnyKeyword","isTSBaseType","type","isTSUnionType","has","push","add","keys","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,oBAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,SAASF,oBAAT,CAA8BG,KAA9B,EAAqC;AACnC,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,IAAI,GAAGR,KAAK,CAACM,CAAD,CAAlB;AACA,QAAI,CAACE,IAAL,EAAW;;AAEX,QAAIH,KAAK,CAACI,OAAN,CAAcD,IAAd,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAED,QAAI,CAAC,GAAGV,UAAU,CAACY,cAAf,EAA+BF,IAA/B,CAAJ,EAA0C;AACxC,aAAO,CAACA,IAAD,CAAP;AACD;;AAED,QAAI,CAAC,GAAGV,UAAU,CAACa,YAAf,EAA6BH,IAA7B,CAAJ,EAAwC;AACtCN,MAAAA,KAAK,CAACM,IAAI,CAACI,IAAN,CAAL,GAAmBJ,IAAnB;AACA;AACD;;AAED,QAAI,CAAC,GAAGV,UAAU,CAACe,aAAf,EAA8BL,IAA9B,CAAJ,EAAyC;AACvC,UAAI,CAACL,UAAU,CAACW,GAAX,CAAeN,IAAI,CAACH,KAApB,CAAL,EAAiC;AAC/BL,QAAAA,KAAK,CAACe,IAAN,CAAW,GAAGP,IAAI,CAACH,KAAnB;AACAF,QAAAA,UAAU,CAACa,GAAX,CAAeR,IAAI,CAACH,KAApB;AACD;;AAED;AACD;;AAEDA,IAAAA,KAAK,CAACU,IAAN,CAAWP,IAAX;AACD;;AAED,OAAK,MAAMI,IAAX,IAAmBpB,MAAM,CAACyB,IAAP,CAAYf,KAAZ,CAAnB,EAAuC;AACrCG,IAAAA,KAAK,CAACU,IAAN,CAAWb,KAAK,CAACU,IAAD,CAAhB;AACD;;AAED,OAAK,MAAMM,IAAX,IAAmB1B,MAAM,CAACyB,IAAP,CAAYhB,QAAZ,CAAnB,EAA0C;AACxCI,IAAAA,KAAK,CAACU,IAAN,CAAWd,QAAQ,CAACiB,IAAD,CAAnB;AACD;;AAED,SAAOb,KAAP;AACD","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = removeTypeDuplicates;\r\n\r\nvar _generated = require(\"../../validators/generated\");\r\n\r\nfunction removeTypeDuplicates(nodes) {\r\n  const generics = {};\r\n  const bases = {};\r\n  const typeGroups = new Set();\r\n  const types = [];\r\n\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    if (!node) continue;\r\n\r\n    if (types.indexOf(node) >= 0) {\r\n      continue;\r\n    }\r\n\r\n    if ((0, _generated.isTSAnyKeyword)(node)) {\r\n      return [node];\r\n    }\r\n\r\n    if ((0, _generated.isTSBaseType)(node)) {\r\n      bases[node.type] = node;\r\n      continue;\r\n    }\r\n\r\n    if ((0, _generated.isTSUnionType)(node)) {\r\n      if (!typeGroups.has(node.types)) {\r\n        nodes.push(...node.types);\r\n        typeGroups.add(node.types);\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    types.push(node);\r\n  }\r\n\r\n  for (const type of Object.keys(bases)) {\r\n    types.push(bases[type]);\r\n  }\r\n\r\n  for (const name of Object.keys(generics)) {\r\n    types.push(generics[name]);\r\n  }\r\n\r\n  return types;\r\n}"]},"metadata":{},"sourceType":"script"}
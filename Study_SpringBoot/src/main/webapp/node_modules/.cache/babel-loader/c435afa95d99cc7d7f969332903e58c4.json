{"ast":null,"code":"import { API_BASE_URL } from \"../api-config\";\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  }); // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    // 추가된 부분\n    console.log(error.status);\n\n    if (error.status === 403) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(ACCESS_TOKEN, response.token); // token이 존재하는 경우 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function signout() {\n  localStorage.setItem(ACCESS_TOKEN, null);\n  window.location.href = \"/login\";\n}","map":{"version":3,"sources":["C:/Users/zhfld/git/Study_springBoot/Study_SpringBoot/src/main/webapp/src/js/service/ApiService.js"],"names":["API_BASE_URL","ACCESS_TOKEN","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","console","log","status","window","location","href","signin","userDTO","token","setItem","signout"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACzC,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACxB,oBAAgB;AADQ,GAAZ,CAAd,CADyC,CAKzC;;AACA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;;AACA,MAAIF,WAAW,IAAIA,WAAW,KAAK,IAAnC,EAAyC;AACvCF,IAAAA,OAAO,CAACK,MAAR,CAAe,eAAf,EAAgC,YAAYH,WAA5C;AACD;;AAED,MAAII,OAAO,GAAG;AACZN,IAAAA,OAAO,EAAEA,OADG;AAEZO,IAAAA,GAAG,EAAEb,YAAY,GAAGG,GAFR;AAGZC,IAAAA,MAAM,EAAEA;AAHI,GAAd;;AAMA,MAAIC,OAAJ,EAAa;AACX;AACAO,IAAAA,OAAO,CAACE,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAf;AACD;;AACD,SAAOY,KAAK,CAACL,OAAO,CAACC,GAAT,EAAcD,OAAd,CAAL,CACJM,IADI,CACEC,QAAD,IACJA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC7B,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GAND,CAFG,EAUJI,KAVI,CAUGC,KAAD,IAAW;AAChB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;;AACA,QAAIH,KAAK,CAACG,MAAN,KAAiB,GAArB,EAA0B;AACxBC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CADwB,CACS;AAClC;;AACD,WAAOT,OAAO,CAACC,MAAR,CAAeE,KAAf,CAAP;AACD,GAjBI,CAAP;AAkBD;AAED,OAAO,SAASO,MAAT,CAAgBC,OAAhB,EAAyB;AAC9B,SAAO/B,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyB+B,OAAzB,CAAJ,CAAsCf,IAAtC,CAA4CC,QAAD,IAAc;AAC9D,QAAIA,QAAQ,CAACe,KAAb,EAAoB;AAClB;AACAzB,MAAAA,YAAY,CAAC0B,OAAb,CAAqBlC,YAArB,EAAmCkB,QAAQ,CAACe,KAA5C,EAFkB,CAGlB;;AACAL,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD;AACF,GAPM,CAAP;AAQD;AACD,OAAO,SAASK,OAAT,GAAkB;AACvB3B,EAAAA,YAAY,CAAC0B,OAAb,CAAqBlC,YAArB,EAAmC,IAAnC;AACA4B,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD","sourcesContent":["import { API_BASE_URL } from \"../api-config\";\r\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\r\n\r\nexport function call(api, method, request) {\r\n  let headers = new Headers({\r\n    \"Content-Type\": \"application/json\",\r\n  });\r\n\r\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\r\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n  if (accessToken && accessToken !== null) {\r\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\r\n  }\r\n\r\n  let options = {\r\n    headers: headers,\r\n    url: API_BASE_URL + api,\r\n    method: method,\r\n  };\r\n\r\n  if (request) {\r\n    // GET method\r\n    options.body = JSON.stringify(request);\r\n  }\r\n  return fetch(options.url, options)\r\n    .then((response) =>\r\n      response.json().then((json) => {\r\n        if (!response.ok) {\r\n          // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\r\n          return Promise.reject(json);\r\n        }\r\n        return json;\r\n      })\r\n    )\r\n    .catch((error) => {\r\n      // 추가된 부분\r\n      console.log(error.status);\r\n      if (error.status === 403) {\r\n        window.location.href = \"/login\"; // redirect\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n}\r\n\r\nexport function signin(userDTO) {\r\n  return call(\"/auth/signin\", \"POST\", userDTO).then((response) => {\r\n    if (response.token) {\r\n      // 로컬 스토리지에 토큰 저장\r\n      localStorage.setItem(ACCESS_TOKEN, response.token);\r\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\r\n      window.location.href = \"/\";\r\n    }\r\n  });\r\n}\r\nexport function signout(){\r\n  localStorage.setItem(ACCESS_TOKEN, null);\r\n  window.location.href = \"/login\";\r\n}"]},"metadata":{},"sourceType":"module"}
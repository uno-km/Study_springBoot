{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\nexports.assertArgumentPlaceholder = assertArgumentPlaceholder;\nexports.assertArrayExpression = assertArrayExpression;\nexports.assertArrayPattern = assertArrayPattern;\nexports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\nexports.assertArrowFunctionExpression = assertArrowFunctionExpression;\nexports.assertAssignmentExpression = assertAssignmentExpression;\nexports.assertAssignmentPattern = assertAssignmentPattern;\nexports.assertAwaitExpression = assertAwaitExpression;\nexports.assertBigIntLiteral = assertBigIntLiteral;\nexports.assertBinary = assertBinary;\nexports.assertBinaryExpression = assertBinaryExpression;\nexports.assertBindExpression = assertBindExpression;\nexports.assertBlock = assertBlock;\nexports.assertBlockParent = assertBlockParent;\nexports.assertBlockStatement = assertBlockStatement;\nexports.assertBooleanLiteral = assertBooleanLiteral;\nexports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\nexports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\nexports.assertBreakStatement = assertBreakStatement;\nexports.assertCallExpression = assertCallExpression;\nexports.assertCatchClause = assertCatchClause;\nexports.assertClass = assertClass;\nexports.assertClassBody = assertClassBody;\nexports.assertClassDeclaration = assertClassDeclaration;\nexports.assertClassExpression = assertClassExpression;\nexports.assertClassImplements = assertClassImplements;\nexports.assertClassMethod = assertClassMethod;\nexports.assertClassPrivateMethod = assertClassPrivateMethod;\nexports.assertClassPrivateProperty = assertClassPrivateProperty;\nexports.assertClassProperty = assertClassProperty;\nexports.assertCompletionStatement = assertCompletionStatement;\nexports.assertConditional = assertConditional;\nexports.assertConditionalExpression = assertConditionalExpression;\nexports.assertContinueStatement = assertContinueStatement;\nexports.assertDebuggerStatement = assertDebuggerStatement;\nexports.assertDecimalLiteral = assertDecimalLiteral;\nexports.assertDeclaration = assertDeclaration;\nexports.assertDeclareClass = assertDeclareClass;\nexports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\nexports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\nexports.assertDeclareFunction = assertDeclareFunction;\nexports.assertDeclareInterface = assertDeclareInterface;\nexports.assertDeclareModule = assertDeclareModule;\nexports.assertDeclareModuleExports = assertDeclareModuleExports;\nexports.assertDeclareOpaqueType = assertDeclareOpaqueType;\nexports.assertDeclareTypeAlias = assertDeclareTypeAlias;\nexports.assertDeclareVariable = assertDeclareVariable;\nexports.assertDeclaredPredicate = assertDeclaredPredicate;\nexports.assertDecorator = assertDecorator;\nexports.assertDirective = assertDirective;\nexports.assertDirectiveLiteral = assertDirectiveLiteral;\nexports.assertDoExpression = assertDoExpression;\nexports.assertDoWhileStatement = assertDoWhileStatement;\nexports.assertEmptyStatement = assertEmptyStatement;\nexports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\nexports.assertEnumBody = assertEnumBody;\nexports.assertEnumBooleanBody = assertEnumBooleanBody;\nexports.assertEnumBooleanMember = assertEnumBooleanMember;\nexports.assertEnumDeclaration = assertEnumDeclaration;\nexports.assertEnumDefaultedMember = assertEnumDefaultedMember;\nexports.assertEnumMember = assertEnumMember;\nexports.assertEnumNumberBody = assertEnumNumberBody;\nexports.assertEnumNumberMember = assertEnumNumberMember;\nexports.assertEnumStringBody = assertEnumStringBody;\nexports.assertEnumStringMember = assertEnumStringMember;\nexports.assertEnumSymbolBody = assertEnumSymbolBody;\nexports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\nexports.assertExportAllDeclaration = assertExportAllDeclaration;\nexports.assertExportDeclaration = assertExportDeclaration;\nexports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\nexports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\nexports.assertExportNamedDeclaration = assertExportNamedDeclaration;\nexports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\nexports.assertExportSpecifier = assertExportSpecifier;\nexports.assertExpression = assertExpression;\nexports.assertExpressionStatement = assertExpressionStatement;\nexports.assertExpressionWrapper = assertExpressionWrapper;\nexports.assertFile = assertFile;\nexports.assertFlow = assertFlow;\nexports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\nexports.assertFlowDeclaration = assertFlowDeclaration;\nexports.assertFlowPredicate = assertFlowPredicate;\nexports.assertFlowType = assertFlowType;\nexports.assertFor = assertFor;\nexports.assertForInStatement = assertForInStatement;\nexports.assertForOfStatement = assertForOfStatement;\nexports.assertForStatement = assertForStatement;\nexports.assertForXStatement = assertForXStatement;\nexports.assertFunction = assertFunction;\nexports.assertFunctionDeclaration = assertFunctionDeclaration;\nexports.assertFunctionExpression = assertFunctionExpression;\nexports.assertFunctionParent = assertFunctionParent;\nexports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\nexports.assertFunctionTypeParam = assertFunctionTypeParam;\nexports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\nexports.assertIdentifier = assertIdentifier;\nexports.assertIfStatement = assertIfStatement;\nexports.assertImmutable = assertImmutable;\nexports.assertImport = assertImport;\nexports.assertImportAttribute = assertImportAttribute;\nexports.assertImportDeclaration = assertImportDeclaration;\nexports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\nexports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\nexports.assertImportSpecifier = assertImportSpecifier;\nexports.assertIndexedAccessType = assertIndexedAccessType;\nexports.assertInferredPredicate = assertInferredPredicate;\nexports.assertInterfaceDeclaration = assertInterfaceDeclaration;\nexports.assertInterfaceExtends = assertInterfaceExtends;\nexports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\nexports.assertInterpreterDirective = assertInterpreterDirective;\nexports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\nexports.assertJSX = assertJSX;\nexports.assertJSXAttribute = assertJSXAttribute;\nexports.assertJSXClosingElement = assertJSXClosingElement;\nexports.assertJSXClosingFragment = assertJSXClosingFragment;\nexports.assertJSXElement = assertJSXElement;\nexports.assertJSXEmptyExpression = assertJSXEmptyExpression;\nexports.assertJSXExpressionContainer = assertJSXExpressionContainer;\nexports.assertJSXFragment = assertJSXFragment;\nexports.assertJSXIdentifier = assertJSXIdentifier;\nexports.assertJSXMemberExpression = assertJSXMemberExpression;\nexports.assertJSXNamespacedName = assertJSXNamespacedName;\nexports.assertJSXOpeningElement = assertJSXOpeningElement;\nexports.assertJSXOpeningFragment = assertJSXOpeningFragment;\nexports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\nexports.assertJSXSpreadChild = assertJSXSpreadChild;\nexports.assertJSXText = assertJSXText;\nexports.assertLVal = assertLVal;\nexports.assertLabeledStatement = assertLabeledStatement;\nexports.assertLiteral = assertLiteral;\nexports.assertLogicalExpression = assertLogicalExpression;\nexports.assertLoop = assertLoop;\nexports.assertMemberExpression = assertMemberExpression;\nexports.assertMetaProperty = assertMetaProperty;\nexports.assertMethod = assertMethod;\nexports.assertMiscellaneous = assertMiscellaneous;\nexports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\nexports.assertModuleDeclaration = assertModuleDeclaration;\nexports.assertModuleExpression = assertModuleExpression;\nexports.assertModuleSpecifier = assertModuleSpecifier;\nexports.assertNewExpression = assertNewExpression;\nexports.assertNoop = assertNoop;\nexports.assertNullLiteral = assertNullLiteral;\nexports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\nexports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\nexports.assertNumberLiteral = assertNumberLiteral;\nexports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\nexports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\nexports.assertNumericLiteral = assertNumericLiteral;\nexports.assertObjectExpression = assertObjectExpression;\nexports.assertObjectMember = assertObjectMember;\nexports.assertObjectMethod = assertObjectMethod;\nexports.assertObjectPattern = assertObjectPattern;\nexports.assertObjectProperty = assertObjectProperty;\nexports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\nexports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\nexports.assertObjectTypeIndexer = assertObjectTypeIndexer;\nexports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\nexports.assertObjectTypeProperty = assertObjectTypeProperty;\nexports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\nexports.assertOpaqueType = assertOpaqueType;\nexports.assertOptionalCallExpression = assertOptionalCallExpression;\nexports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;\nexports.assertOptionalMemberExpression = assertOptionalMemberExpression;\nexports.assertParenthesizedExpression = assertParenthesizedExpression;\nexports.assertPattern = assertPattern;\nexports.assertPatternLike = assertPatternLike;\nexports.assertPipelineBareFunction = assertPipelineBareFunction;\nexports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\nexports.assertPipelineTopicExpression = assertPipelineTopicExpression;\nexports.assertPlaceholder = assertPlaceholder;\nexports.assertPrivate = assertPrivate;\nexports.assertPrivateName = assertPrivateName;\nexports.assertProgram = assertProgram;\nexports.assertProperty = assertProperty;\nexports.assertPureish = assertPureish;\nexports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\nexports.assertRecordExpression = assertRecordExpression;\nexports.assertRegExpLiteral = assertRegExpLiteral;\nexports.assertRegexLiteral = assertRegexLiteral;\nexports.assertRestElement = assertRestElement;\nexports.assertRestProperty = assertRestProperty;\nexports.assertReturnStatement = assertReturnStatement;\nexports.assertScopable = assertScopable;\nexports.assertSequenceExpression = assertSequenceExpression;\nexports.assertSpreadElement = assertSpreadElement;\nexports.assertSpreadProperty = assertSpreadProperty;\nexports.assertStandardized = assertStandardized;\nexports.assertStatement = assertStatement;\nexports.assertStaticBlock = assertStaticBlock;\nexports.assertStringLiteral = assertStringLiteral;\nexports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\nexports.assertStringTypeAnnotation = assertStringTypeAnnotation;\nexports.assertSuper = assertSuper;\nexports.assertSwitchCase = assertSwitchCase;\nexports.assertSwitchStatement = assertSwitchStatement;\nexports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;\nexports.assertTSAnyKeyword = assertTSAnyKeyword;\nexports.assertTSArrayType = assertTSArrayType;\nexports.assertTSAsExpression = assertTSAsExpression;\nexports.assertTSBaseType = assertTSBaseType;\nexports.assertTSBigIntKeyword = assertTSBigIntKeyword;\nexports.assertTSBooleanKeyword = assertTSBooleanKeyword;\nexports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\nexports.assertTSConditionalType = assertTSConditionalType;\nexports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\nexports.assertTSConstructorType = assertTSConstructorType;\nexports.assertTSDeclareFunction = assertTSDeclareFunction;\nexports.assertTSDeclareMethod = assertTSDeclareMethod;\nexports.assertTSEntityName = assertTSEntityName;\nexports.assertTSEnumDeclaration = assertTSEnumDeclaration;\nexports.assertTSEnumMember = assertTSEnumMember;\nexports.assertTSExportAssignment = assertTSExportAssignment;\nexports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\nexports.assertTSExternalModuleReference = assertTSExternalModuleReference;\nexports.assertTSFunctionType = assertTSFunctionType;\nexports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\nexports.assertTSImportType = assertTSImportType;\nexports.assertTSIndexSignature = assertTSIndexSignature;\nexports.assertTSIndexedAccessType = assertTSIndexedAccessType;\nexports.assertTSInferType = assertTSInferType;\nexports.assertTSInterfaceBody = assertTSInterfaceBody;\nexports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\nexports.assertTSIntersectionType = assertTSIntersectionType;\nexports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;\nexports.assertTSLiteralType = assertTSLiteralType;\nexports.assertTSMappedType = assertTSMappedType;\nexports.assertTSMethodSignature = assertTSMethodSignature;\nexports.assertTSModuleBlock = assertTSModuleBlock;\nexports.assertTSModuleDeclaration = assertTSModuleDeclaration;\nexports.assertTSNamedTupleMember = assertTSNamedTupleMember;\nexports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\nexports.assertTSNeverKeyword = assertTSNeverKeyword;\nexports.assertTSNonNullExpression = assertTSNonNullExpression;\nexports.assertTSNullKeyword = assertTSNullKeyword;\nexports.assertTSNumberKeyword = assertTSNumberKeyword;\nexports.assertTSObjectKeyword = assertTSObjectKeyword;\nexports.assertTSOptionalType = assertTSOptionalType;\nexports.assertTSParameterProperty = assertTSParameterProperty;\nexports.assertTSParenthesizedType = assertTSParenthesizedType;\nexports.assertTSPropertySignature = assertTSPropertySignature;\nexports.assertTSQualifiedName = assertTSQualifiedName;\nexports.assertTSRestType = assertTSRestType;\nexports.assertTSStringKeyword = assertTSStringKeyword;\nexports.assertTSSymbolKeyword = assertTSSymbolKeyword;\nexports.assertTSThisType = assertTSThisType;\nexports.assertTSTupleType = assertTSTupleType;\nexports.assertTSType = assertTSType;\nexports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\nexports.assertTSTypeAnnotation = assertTSTypeAnnotation;\nexports.assertTSTypeAssertion = assertTSTypeAssertion;\nexports.assertTSTypeElement = assertTSTypeElement;\nexports.assertTSTypeLiteral = assertTSTypeLiteral;\nexports.assertTSTypeOperator = assertTSTypeOperator;\nexports.assertTSTypeParameter = assertTSTypeParameter;\nexports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\nexports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\nexports.assertTSTypePredicate = assertTSTypePredicate;\nexports.assertTSTypeQuery = assertTSTypeQuery;\nexports.assertTSTypeReference = assertTSTypeReference;\nexports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\nexports.assertTSUnionType = assertTSUnionType;\nexports.assertTSUnknownKeyword = assertTSUnknownKeyword;\nexports.assertTSVoidKeyword = assertTSVoidKeyword;\nexports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\nexports.assertTemplateElement = assertTemplateElement;\nexports.assertTemplateLiteral = assertTemplateLiteral;\nexports.assertTerminatorless = assertTerminatorless;\nexports.assertThisExpression = assertThisExpression;\nexports.assertThisTypeAnnotation = assertThisTypeAnnotation;\nexports.assertThrowStatement = assertThrowStatement;\nexports.assertTopicReference = assertTopicReference;\nexports.assertTryStatement = assertTryStatement;\nexports.assertTupleExpression = assertTupleExpression;\nexports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\nexports.assertTypeAlias = assertTypeAlias;\nexports.assertTypeAnnotation = assertTypeAnnotation;\nexports.assertTypeCastExpression = assertTypeCastExpression;\nexports.assertTypeParameter = assertTypeParameter;\nexports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\nexports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\nexports.assertTypeScript = assertTypeScript;\nexports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\nexports.assertUnaryExpression = assertUnaryExpression;\nexports.assertUnaryLike = assertUnaryLike;\nexports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\nexports.assertUpdateExpression = assertUpdateExpression;\nexports.assertUserWhitespacable = assertUserWhitespacable;\nexports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\nexports.assertVariableDeclaration = assertVariableDeclaration;\nexports.assertVariableDeclarator = assertVariableDeclarator;\nexports.assertVariance = assertVariance;\nexports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\nexports.assertWhile = assertWhile;\nexports.assertWhileStatement = assertWhileStatement;\nexports.assertWithStatement = assertWithStatement;\nexports.assertYieldExpression = assertYieldExpression;\n\nvar _is = require(\"../../validators/is\");\n\nfunction assert(type, node, opts) {\n  if (!(0, _is.default)(type, node, opts)) {\n    throw new Error(`Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` + `but instead got \"${node.type}\".`);\n  }\n}\n\nfunction assertArrayExpression(node, opts) {\n  assert(\"ArrayExpression\", node, opts);\n}\n\nfunction assertAssignmentExpression(node, opts) {\n  assert(\"AssignmentExpression\", node, opts);\n}\n\nfunction assertBinaryExpression(node, opts) {\n  assert(\"BinaryExpression\", node, opts);\n}\n\nfunction assertInterpreterDirective(node, opts) {\n  assert(\"InterpreterDirective\", node, opts);\n}\n\nfunction assertDirective(node, opts) {\n  assert(\"Directive\", node, opts);\n}\n\nfunction assertDirectiveLiteral(node, opts) {\n  assert(\"DirectiveLiteral\", node, opts);\n}\n\nfunction assertBlockStatement(node, opts) {\n  assert(\"BlockStatement\", node, opts);\n}\n\nfunction assertBreakStatement(node, opts) {\n  assert(\"BreakStatement\", node, opts);\n}\n\nfunction assertCallExpression(node, opts) {\n  assert(\"CallExpression\", node, opts);\n}\n\nfunction assertCatchClause(node, opts) {\n  assert(\"CatchClause\", node, opts);\n}\n\nfunction assertConditionalExpression(node, opts) {\n  assert(\"ConditionalExpression\", node, opts);\n}\n\nfunction assertContinueStatement(node, opts) {\n  assert(\"ContinueStatement\", node, opts);\n}\n\nfunction assertDebuggerStatement(node, opts) {\n  assert(\"DebuggerStatement\", node, opts);\n}\n\nfunction assertDoWhileStatement(node, opts) {\n  assert(\"DoWhileStatement\", node, opts);\n}\n\nfunction assertEmptyStatement(node, opts) {\n  assert(\"EmptyStatement\", node, opts);\n}\n\nfunction assertExpressionStatement(node, opts) {\n  assert(\"ExpressionStatement\", node, opts);\n}\n\nfunction assertFile(node, opts) {\n  assert(\"File\", node, opts);\n}\n\nfunction assertForInStatement(node, opts) {\n  assert(\"ForInStatement\", node, opts);\n}\n\nfunction assertForStatement(node, opts) {\n  assert(\"ForStatement\", node, opts);\n}\n\nfunction assertFunctionDeclaration(node, opts) {\n  assert(\"FunctionDeclaration\", node, opts);\n}\n\nfunction assertFunctionExpression(node, opts) {\n  assert(\"FunctionExpression\", node, opts);\n}\n\nfunction assertIdentifier(node, opts) {\n  assert(\"Identifier\", node, opts);\n}\n\nfunction assertIfStatement(node, opts) {\n  assert(\"IfStatement\", node, opts);\n}\n\nfunction assertLabeledStatement(node, opts) {\n  assert(\"LabeledStatement\", node, opts);\n}\n\nfunction assertStringLiteral(node, opts) {\n  assert(\"StringLiteral\", node, opts);\n}\n\nfunction assertNumericLiteral(node, opts) {\n  assert(\"NumericLiteral\", node, opts);\n}\n\nfunction assertNullLiteral(node, opts) {\n  assert(\"NullLiteral\", node, opts);\n}\n\nfunction assertBooleanLiteral(node, opts) {\n  assert(\"BooleanLiteral\", node, opts);\n}\n\nfunction assertRegExpLiteral(node, opts) {\n  assert(\"RegExpLiteral\", node, opts);\n}\n\nfunction assertLogicalExpression(node, opts) {\n  assert(\"LogicalExpression\", node, opts);\n}\n\nfunction assertMemberExpression(node, opts) {\n  assert(\"MemberExpression\", node, opts);\n}\n\nfunction assertNewExpression(node, opts) {\n  assert(\"NewExpression\", node, opts);\n}\n\nfunction assertProgram(node, opts) {\n  assert(\"Program\", node, opts);\n}\n\nfunction assertObjectExpression(node, opts) {\n  assert(\"ObjectExpression\", node, opts);\n}\n\nfunction assertObjectMethod(node, opts) {\n  assert(\"ObjectMethod\", node, opts);\n}\n\nfunction assertObjectProperty(node, opts) {\n  assert(\"ObjectProperty\", node, opts);\n}\n\nfunction assertRestElement(node, opts) {\n  assert(\"RestElement\", node, opts);\n}\n\nfunction assertReturnStatement(node, opts) {\n  assert(\"ReturnStatement\", node, opts);\n}\n\nfunction assertSequenceExpression(node, opts) {\n  assert(\"SequenceExpression\", node, opts);\n}\n\nfunction assertParenthesizedExpression(node, opts) {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\n\nfunction assertSwitchCase(node, opts) {\n  assert(\"SwitchCase\", node, opts);\n}\n\nfunction assertSwitchStatement(node, opts) {\n  assert(\"SwitchStatement\", node, opts);\n}\n\nfunction assertThisExpression(node, opts) {\n  assert(\"ThisExpression\", node, opts);\n}\n\nfunction assertThrowStatement(node, opts) {\n  assert(\"ThrowStatement\", node, opts);\n}\n\nfunction assertTryStatement(node, opts) {\n  assert(\"TryStatement\", node, opts);\n}\n\nfunction assertUnaryExpression(node, opts) {\n  assert(\"UnaryExpression\", node, opts);\n}\n\nfunction assertUpdateExpression(node, opts) {\n  assert(\"UpdateExpression\", node, opts);\n}\n\nfunction assertVariableDeclaration(node, opts) {\n  assert(\"VariableDeclaration\", node, opts);\n}\n\nfunction assertVariableDeclarator(node, opts) {\n  assert(\"VariableDeclarator\", node, opts);\n}\n\nfunction assertWhileStatement(node, opts) {\n  assert(\"WhileStatement\", node, opts);\n}\n\nfunction assertWithStatement(node, opts) {\n  assert(\"WithStatement\", node, opts);\n}\n\nfunction assertAssignmentPattern(node, opts) {\n  assert(\"AssignmentPattern\", node, opts);\n}\n\nfunction assertArrayPattern(node, opts) {\n  assert(\"ArrayPattern\", node, opts);\n}\n\nfunction assertArrowFunctionExpression(node, opts) {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\n\nfunction assertClassBody(node, opts) {\n  assert(\"ClassBody\", node, opts);\n}\n\nfunction assertClassExpression(node, opts) {\n  assert(\"ClassExpression\", node, opts);\n}\n\nfunction assertClassDeclaration(node, opts) {\n  assert(\"ClassDeclaration\", node, opts);\n}\n\nfunction assertExportAllDeclaration(node, opts) {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\n\nfunction assertExportDefaultDeclaration(node, opts) {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\n\nfunction assertExportNamedDeclaration(node, opts) {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\n\nfunction assertExportSpecifier(node, opts) {\n  assert(\"ExportSpecifier\", node, opts);\n}\n\nfunction assertForOfStatement(node, opts) {\n  assert(\"ForOfStatement\", node, opts);\n}\n\nfunction assertImportDeclaration(node, opts) {\n  assert(\"ImportDeclaration\", node, opts);\n}\n\nfunction assertImportDefaultSpecifier(node, opts) {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\n\nfunction assertImportNamespaceSpecifier(node, opts) {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\n\nfunction assertImportSpecifier(node, opts) {\n  assert(\"ImportSpecifier\", node, opts);\n}\n\nfunction assertMetaProperty(node, opts) {\n  assert(\"MetaProperty\", node, opts);\n}\n\nfunction assertClassMethod(node, opts) {\n  assert(\"ClassMethod\", node, opts);\n}\n\nfunction assertObjectPattern(node, opts) {\n  assert(\"ObjectPattern\", node, opts);\n}\n\nfunction assertSpreadElement(node, opts) {\n  assert(\"SpreadElement\", node, opts);\n}\n\nfunction assertSuper(node, opts) {\n  assert(\"Super\", node, opts);\n}\n\nfunction assertTaggedTemplateExpression(node, opts) {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\n\nfunction assertTemplateElement(node, opts) {\n  assert(\"TemplateElement\", node, opts);\n}\n\nfunction assertTemplateLiteral(node, opts) {\n  assert(\"TemplateLiteral\", node, opts);\n}\n\nfunction assertYieldExpression(node, opts) {\n  assert(\"YieldExpression\", node, opts);\n}\n\nfunction assertAwaitExpression(node, opts) {\n  assert(\"AwaitExpression\", node, opts);\n}\n\nfunction assertImport(node, opts) {\n  assert(\"Import\", node, opts);\n}\n\nfunction assertBigIntLiteral(node, opts) {\n  assert(\"BigIntLiteral\", node, opts);\n}\n\nfunction assertExportNamespaceSpecifier(node, opts) {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\n\nfunction assertOptionalMemberExpression(node, opts) {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\n\nfunction assertOptionalCallExpression(node, opts) {\n  assert(\"OptionalCallExpression\", node, opts);\n}\n\nfunction assertClassProperty(node, opts) {\n  assert(\"ClassProperty\", node, opts);\n}\n\nfunction assertClassPrivateProperty(node, opts) {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\n\nfunction assertClassPrivateMethod(node, opts) {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\n\nfunction assertPrivateName(node, opts) {\n  assert(\"PrivateName\", node, opts);\n}\n\nfunction assertStaticBlock(node, opts) {\n  assert(\"StaticBlock\", node, opts);\n}\n\nfunction assertAnyTypeAnnotation(node, opts) {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\n\nfunction assertArrayTypeAnnotation(node, opts) {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\n\nfunction assertBooleanTypeAnnotation(node, opts) {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\n\nfunction assertBooleanLiteralTypeAnnotation(node, opts) {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\n\nfunction assertNullLiteralTypeAnnotation(node, opts) {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\n\nfunction assertClassImplements(node, opts) {\n  assert(\"ClassImplements\", node, opts);\n}\n\nfunction assertDeclareClass(node, opts) {\n  assert(\"DeclareClass\", node, opts);\n}\n\nfunction assertDeclareFunction(node, opts) {\n  assert(\"DeclareFunction\", node, opts);\n}\n\nfunction assertDeclareInterface(node, opts) {\n  assert(\"DeclareInterface\", node, opts);\n}\n\nfunction assertDeclareModule(node, opts) {\n  assert(\"DeclareModule\", node, opts);\n}\n\nfunction assertDeclareModuleExports(node, opts) {\n  assert(\"DeclareModuleExports\", node, opts);\n}\n\nfunction assertDeclareTypeAlias(node, opts) {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\n\nfunction assertDeclareOpaqueType(node, opts) {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\n\nfunction assertDeclareVariable(node, opts) {\n  assert(\"DeclareVariable\", node, opts);\n}\n\nfunction assertDeclareExportDeclaration(node, opts) {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\n\nfunction assertDeclareExportAllDeclaration(node, opts) {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\n\nfunction assertDeclaredPredicate(node, opts) {\n  assert(\"DeclaredPredicate\", node, opts);\n}\n\nfunction assertExistsTypeAnnotation(node, opts) {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\n\nfunction assertFunctionTypeAnnotation(node, opts) {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\n\nfunction assertFunctionTypeParam(node, opts) {\n  assert(\"FunctionTypeParam\", node, opts);\n}\n\nfunction assertGenericTypeAnnotation(node, opts) {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\n\nfunction assertInferredPredicate(node, opts) {\n  assert(\"InferredPredicate\", node, opts);\n}\n\nfunction assertInterfaceExtends(node, opts) {\n  assert(\"InterfaceExtends\", node, opts);\n}\n\nfunction assertInterfaceDeclaration(node, opts) {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\n\nfunction assertInterfaceTypeAnnotation(node, opts) {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\n\nfunction assertIntersectionTypeAnnotation(node, opts) {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\n\nfunction assertMixedTypeAnnotation(node, opts) {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\n\nfunction assertEmptyTypeAnnotation(node, opts) {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\n\nfunction assertNullableTypeAnnotation(node, opts) {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\n\nfunction assertNumberLiteralTypeAnnotation(node, opts) {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\n\nfunction assertNumberTypeAnnotation(node, opts) {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\n\nfunction assertObjectTypeAnnotation(node, opts) {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\n\nfunction assertObjectTypeInternalSlot(node, opts) {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\n\nfunction assertObjectTypeCallProperty(node, opts) {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\n\nfunction assertObjectTypeIndexer(node, opts) {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\n\nfunction assertObjectTypeProperty(node, opts) {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\n\nfunction assertObjectTypeSpreadProperty(node, opts) {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\n\nfunction assertOpaqueType(node, opts) {\n  assert(\"OpaqueType\", node, opts);\n}\n\nfunction assertQualifiedTypeIdentifier(node, opts) {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\n\nfunction assertStringLiteralTypeAnnotation(node, opts) {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\n\nfunction assertStringTypeAnnotation(node, opts) {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\n\nfunction assertSymbolTypeAnnotation(node, opts) {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\n\nfunction assertThisTypeAnnotation(node, opts) {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\n\nfunction assertTupleTypeAnnotation(node, opts) {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\n\nfunction assertTypeofTypeAnnotation(node, opts) {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\n\nfunction assertTypeAlias(node, opts) {\n  assert(\"TypeAlias\", node, opts);\n}\n\nfunction assertTypeAnnotation(node, opts) {\n  assert(\"TypeAnnotation\", node, opts);\n}\n\nfunction assertTypeCastExpression(node, opts) {\n  assert(\"TypeCastExpression\", node, opts);\n}\n\nfunction assertTypeParameter(node, opts) {\n  assert(\"TypeParameter\", node, opts);\n}\n\nfunction assertTypeParameterDeclaration(node, opts) {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\n\nfunction assertTypeParameterInstantiation(node, opts) {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\n\nfunction assertUnionTypeAnnotation(node, opts) {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\n\nfunction assertVariance(node, opts) {\n  assert(\"Variance\", node, opts);\n}\n\nfunction assertVoidTypeAnnotation(node, opts) {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\n\nfunction assertEnumDeclaration(node, opts) {\n  assert(\"EnumDeclaration\", node, opts);\n}\n\nfunction assertEnumBooleanBody(node, opts) {\n  assert(\"EnumBooleanBody\", node, opts);\n}\n\nfunction assertEnumNumberBody(node, opts) {\n  assert(\"EnumNumberBody\", node, opts);\n}\n\nfunction assertEnumStringBody(node, opts) {\n  assert(\"EnumStringBody\", node, opts);\n}\n\nfunction assertEnumSymbolBody(node, opts) {\n  assert(\"EnumSymbolBody\", node, opts);\n}\n\nfunction assertEnumBooleanMember(node, opts) {\n  assert(\"EnumBooleanMember\", node, opts);\n}\n\nfunction assertEnumNumberMember(node, opts) {\n  assert(\"EnumNumberMember\", node, opts);\n}\n\nfunction assertEnumStringMember(node, opts) {\n  assert(\"EnumStringMember\", node, opts);\n}\n\nfunction assertEnumDefaultedMember(node, opts) {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\n\nfunction assertIndexedAccessType(node, opts) {\n  assert(\"IndexedAccessType\", node, opts);\n}\n\nfunction assertOptionalIndexedAccessType(node, opts) {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\n\nfunction assertJSXAttribute(node, opts) {\n  assert(\"JSXAttribute\", node, opts);\n}\n\nfunction assertJSXClosingElement(node, opts) {\n  assert(\"JSXClosingElement\", node, opts);\n}\n\nfunction assertJSXElement(node, opts) {\n  assert(\"JSXElement\", node, opts);\n}\n\nfunction assertJSXEmptyExpression(node, opts) {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\n\nfunction assertJSXExpressionContainer(node, opts) {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\n\nfunction assertJSXSpreadChild(node, opts) {\n  assert(\"JSXSpreadChild\", node, opts);\n}\n\nfunction assertJSXIdentifier(node, opts) {\n  assert(\"JSXIdentifier\", node, opts);\n}\n\nfunction assertJSXMemberExpression(node, opts) {\n  assert(\"JSXMemberExpression\", node, opts);\n}\n\nfunction assertJSXNamespacedName(node, opts) {\n  assert(\"JSXNamespacedName\", node, opts);\n}\n\nfunction assertJSXOpeningElement(node, opts) {\n  assert(\"JSXOpeningElement\", node, opts);\n}\n\nfunction assertJSXSpreadAttribute(node, opts) {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\n\nfunction assertJSXText(node, opts) {\n  assert(\"JSXText\", node, opts);\n}\n\nfunction assertJSXFragment(node, opts) {\n  assert(\"JSXFragment\", node, opts);\n}\n\nfunction assertJSXOpeningFragment(node, opts) {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\n\nfunction assertJSXClosingFragment(node, opts) {\n  assert(\"JSXClosingFragment\", node, opts);\n}\n\nfunction assertNoop(node, opts) {\n  assert(\"Noop\", node, opts);\n}\n\nfunction assertPlaceholder(node, opts) {\n  assert(\"Placeholder\", node, opts);\n}\n\nfunction assertV8IntrinsicIdentifier(node, opts) {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\n\nfunction assertArgumentPlaceholder(node, opts) {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\n\nfunction assertBindExpression(node, opts) {\n  assert(\"BindExpression\", node, opts);\n}\n\nfunction assertImportAttribute(node, opts) {\n  assert(\"ImportAttribute\", node, opts);\n}\n\nfunction assertDecorator(node, opts) {\n  assert(\"Decorator\", node, opts);\n}\n\nfunction assertDoExpression(node, opts) {\n  assert(\"DoExpression\", node, opts);\n}\n\nfunction assertExportDefaultSpecifier(node, opts) {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\n\nfunction assertRecordExpression(node, opts) {\n  assert(\"RecordExpression\", node, opts);\n}\n\nfunction assertTupleExpression(node, opts) {\n  assert(\"TupleExpression\", node, opts);\n}\n\nfunction assertDecimalLiteral(node, opts) {\n  assert(\"DecimalLiteral\", node, opts);\n}\n\nfunction assertModuleExpression(node, opts) {\n  assert(\"ModuleExpression\", node, opts);\n}\n\nfunction assertTopicReference(node, opts) {\n  assert(\"TopicReference\", node, opts);\n}\n\nfunction assertPipelineTopicExpression(node, opts) {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\n\nfunction assertPipelineBareFunction(node, opts) {\n  assert(\"PipelineBareFunction\", node, opts);\n}\n\nfunction assertPipelinePrimaryTopicReference(node, opts) {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\n\nfunction assertTSParameterProperty(node, opts) {\n  assert(\"TSParameterProperty\", node, opts);\n}\n\nfunction assertTSDeclareFunction(node, opts) {\n  assert(\"TSDeclareFunction\", node, opts);\n}\n\nfunction assertTSDeclareMethod(node, opts) {\n  assert(\"TSDeclareMethod\", node, opts);\n}\n\nfunction assertTSQualifiedName(node, opts) {\n  assert(\"TSQualifiedName\", node, opts);\n}\n\nfunction assertTSCallSignatureDeclaration(node, opts) {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\n\nfunction assertTSConstructSignatureDeclaration(node, opts) {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\n\nfunction assertTSPropertySignature(node, opts) {\n  assert(\"TSPropertySignature\", node, opts);\n}\n\nfunction assertTSMethodSignature(node, opts) {\n  assert(\"TSMethodSignature\", node, opts);\n}\n\nfunction assertTSIndexSignature(node, opts) {\n  assert(\"TSIndexSignature\", node, opts);\n}\n\nfunction assertTSAnyKeyword(node, opts) {\n  assert(\"TSAnyKeyword\", node, opts);\n}\n\nfunction assertTSBooleanKeyword(node, opts) {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\n\nfunction assertTSBigIntKeyword(node, opts) {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\n\nfunction assertTSIntrinsicKeyword(node, opts) {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\n\nfunction assertTSNeverKeyword(node, opts) {\n  assert(\"TSNeverKeyword\", node, opts);\n}\n\nfunction assertTSNullKeyword(node, opts) {\n  assert(\"TSNullKeyword\", node, opts);\n}\n\nfunction assertTSNumberKeyword(node, opts) {\n  assert(\"TSNumberKeyword\", node, opts);\n}\n\nfunction assertTSObjectKeyword(node, opts) {\n  assert(\"TSObjectKeyword\", node, opts);\n}\n\nfunction assertTSStringKeyword(node, opts) {\n  assert(\"TSStringKeyword\", node, opts);\n}\n\nfunction assertTSSymbolKeyword(node, opts) {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\n\nfunction assertTSUndefinedKeyword(node, opts) {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\n\nfunction assertTSUnknownKeyword(node, opts) {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\n\nfunction assertTSVoidKeyword(node, opts) {\n  assert(\"TSVoidKeyword\", node, opts);\n}\n\nfunction assertTSThisType(node, opts) {\n  assert(\"TSThisType\", node, opts);\n}\n\nfunction assertTSFunctionType(node, opts) {\n  assert(\"TSFunctionType\", node, opts);\n}\n\nfunction assertTSConstructorType(node, opts) {\n  assert(\"TSConstructorType\", node, opts);\n}\n\nfunction assertTSTypeReference(node, opts) {\n  assert(\"TSTypeReference\", node, opts);\n}\n\nfunction assertTSTypePredicate(node, opts) {\n  assert(\"TSTypePredicate\", node, opts);\n}\n\nfunction assertTSTypeQuery(node, opts) {\n  assert(\"TSTypeQuery\", node, opts);\n}\n\nfunction assertTSTypeLiteral(node, opts) {\n  assert(\"TSTypeLiteral\", node, opts);\n}\n\nfunction assertTSArrayType(node, opts) {\n  assert(\"TSArrayType\", node, opts);\n}\n\nfunction assertTSTupleType(node, opts) {\n  assert(\"TSTupleType\", node, opts);\n}\n\nfunction assertTSOptionalType(node, opts) {\n  assert(\"TSOptionalType\", node, opts);\n}\n\nfunction assertTSRestType(node, opts) {\n  assert(\"TSRestType\", node, opts);\n}\n\nfunction assertTSNamedTupleMember(node, opts) {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\n\nfunction assertTSUnionType(node, opts) {\n  assert(\"TSUnionType\", node, opts);\n}\n\nfunction assertTSIntersectionType(node, opts) {\n  assert(\"TSIntersectionType\", node, opts);\n}\n\nfunction assertTSConditionalType(node, opts) {\n  assert(\"TSConditionalType\", node, opts);\n}\n\nfunction assertTSInferType(node, opts) {\n  assert(\"TSInferType\", node, opts);\n}\n\nfunction assertTSParenthesizedType(node, opts) {\n  assert(\"TSParenthesizedType\", node, opts);\n}\n\nfunction assertTSTypeOperator(node, opts) {\n  assert(\"TSTypeOperator\", node, opts);\n}\n\nfunction assertTSIndexedAccessType(node, opts) {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\n\nfunction assertTSMappedType(node, opts) {\n  assert(\"TSMappedType\", node, opts);\n}\n\nfunction assertTSLiteralType(node, opts) {\n  assert(\"TSLiteralType\", node, opts);\n}\n\nfunction assertTSExpressionWithTypeArguments(node, opts) {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\n\nfunction assertTSInterfaceDeclaration(node, opts) {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\n\nfunction assertTSInterfaceBody(node, opts) {\n  assert(\"TSInterfaceBody\", node, opts);\n}\n\nfunction assertTSTypeAliasDeclaration(node, opts) {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\n\nfunction assertTSAsExpression(node, opts) {\n  assert(\"TSAsExpression\", node, opts);\n}\n\nfunction assertTSTypeAssertion(node, opts) {\n  assert(\"TSTypeAssertion\", node, opts);\n}\n\nfunction assertTSEnumDeclaration(node, opts) {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\n\nfunction assertTSEnumMember(node, opts) {\n  assert(\"TSEnumMember\", node, opts);\n}\n\nfunction assertTSModuleDeclaration(node, opts) {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\n\nfunction assertTSModuleBlock(node, opts) {\n  assert(\"TSModuleBlock\", node, opts);\n}\n\nfunction assertTSImportType(node, opts) {\n  assert(\"TSImportType\", node, opts);\n}\n\nfunction assertTSImportEqualsDeclaration(node, opts) {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\n\nfunction assertTSExternalModuleReference(node, opts) {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\n\nfunction assertTSNonNullExpression(node, opts) {\n  assert(\"TSNonNullExpression\", node, opts);\n}\n\nfunction assertTSExportAssignment(node, opts) {\n  assert(\"TSExportAssignment\", node, opts);\n}\n\nfunction assertTSNamespaceExportDeclaration(node, opts) {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\n\nfunction assertTSTypeAnnotation(node, opts) {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\n\nfunction assertTSTypeParameterInstantiation(node, opts) {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\n\nfunction assertTSTypeParameterDeclaration(node, opts) {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\n\nfunction assertTSTypeParameter(node, opts) {\n  assert(\"TSTypeParameter\", node, opts);\n}\n\nfunction assertStandardized(node, opts) {\n  assert(\"Standardized\", node, opts);\n}\n\nfunction assertExpression(node, opts) {\n  assert(\"Expression\", node, opts);\n}\n\nfunction assertBinary(node, opts) {\n  assert(\"Binary\", node, opts);\n}\n\nfunction assertScopable(node, opts) {\n  assert(\"Scopable\", node, opts);\n}\n\nfunction assertBlockParent(node, opts) {\n  assert(\"BlockParent\", node, opts);\n}\n\nfunction assertBlock(node, opts) {\n  assert(\"Block\", node, opts);\n}\n\nfunction assertStatement(node, opts) {\n  assert(\"Statement\", node, opts);\n}\n\nfunction assertTerminatorless(node, opts) {\n  assert(\"Terminatorless\", node, opts);\n}\n\nfunction assertCompletionStatement(node, opts) {\n  assert(\"CompletionStatement\", node, opts);\n}\n\nfunction assertConditional(node, opts) {\n  assert(\"Conditional\", node, opts);\n}\n\nfunction assertLoop(node, opts) {\n  assert(\"Loop\", node, opts);\n}\n\nfunction assertWhile(node, opts) {\n  assert(\"While\", node, opts);\n}\n\nfunction assertExpressionWrapper(node, opts) {\n  assert(\"ExpressionWrapper\", node, opts);\n}\n\nfunction assertFor(node, opts) {\n  assert(\"For\", node, opts);\n}\n\nfunction assertForXStatement(node, opts) {\n  assert(\"ForXStatement\", node, opts);\n}\n\nfunction assertFunction(node, opts) {\n  assert(\"Function\", node, opts);\n}\n\nfunction assertFunctionParent(node, opts) {\n  assert(\"FunctionParent\", node, opts);\n}\n\nfunction assertPureish(node, opts) {\n  assert(\"Pureish\", node, opts);\n}\n\nfunction assertDeclaration(node, opts) {\n  assert(\"Declaration\", node, opts);\n}\n\nfunction assertPatternLike(node, opts) {\n  assert(\"PatternLike\", node, opts);\n}\n\nfunction assertLVal(node, opts) {\n  assert(\"LVal\", node, opts);\n}\n\nfunction assertTSEntityName(node, opts) {\n  assert(\"TSEntityName\", node, opts);\n}\n\nfunction assertLiteral(node, opts) {\n  assert(\"Literal\", node, opts);\n}\n\nfunction assertImmutable(node, opts) {\n  assert(\"Immutable\", node, opts);\n}\n\nfunction assertUserWhitespacable(node, opts) {\n  assert(\"UserWhitespacable\", node, opts);\n}\n\nfunction assertMethod(node, opts) {\n  assert(\"Method\", node, opts);\n}\n\nfunction assertObjectMember(node, opts) {\n  assert(\"ObjectMember\", node, opts);\n}\n\nfunction assertProperty(node, opts) {\n  assert(\"Property\", node, opts);\n}\n\nfunction assertUnaryLike(node, opts) {\n  assert(\"UnaryLike\", node, opts);\n}\n\nfunction assertPattern(node, opts) {\n  assert(\"Pattern\", node, opts);\n}\n\nfunction assertClass(node, opts) {\n  assert(\"Class\", node, opts);\n}\n\nfunction assertModuleDeclaration(node, opts) {\n  assert(\"ModuleDeclaration\", node, opts);\n}\n\nfunction assertExportDeclaration(node, opts) {\n  assert(\"ExportDeclaration\", node, opts);\n}\n\nfunction assertModuleSpecifier(node, opts) {\n  assert(\"ModuleSpecifier\", node, opts);\n}\n\nfunction assertPrivate(node, opts) {\n  assert(\"Private\", node, opts);\n}\n\nfunction assertFlow(node, opts) {\n  assert(\"Flow\", node, opts);\n}\n\nfunction assertFlowType(node, opts) {\n  assert(\"FlowType\", node, opts);\n}\n\nfunction assertFlowBaseAnnotation(node, opts) {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\n\nfunction assertFlowDeclaration(node, opts) {\n  assert(\"FlowDeclaration\", node, opts);\n}\n\nfunction assertFlowPredicate(node, opts) {\n  assert(\"FlowPredicate\", node, opts);\n}\n\nfunction assertEnumBody(node, opts) {\n  assert(\"EnumBody\", node, opts);\n}\n\nfunction assertEnumMember(node, opts) {\n  assert(\"EnumMember\", node, opts);\n}\n\nfunction assertJSX(node, opts) {\n  assert(\"JSX\", node, opts);\n}\n\nfunction assertMiscellaneous(node, opts) {\n  assert(\"Miscellaneous\", node, opts);\n}\n\nfunction assertTypeScript(node, opts) {\n  assert(\"TypeScript\", node, opts);\n}\n\nfunction assertTSTypeElement(node, opts) {\n  assert(\"TSTypeElement\", node, opts);\n}\n\nfunction assertTSType(node, opts) {\n  assert(\"TSType\", node, opts);\n}\n\nfunction assertTSBaseType(node, opts) {\n  assert(\"TSBaseType\", node, opts);\n}\n\nfunction assertNumberLiteral(node, opts) {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\n\nfunction assertRegexLiteral(node, opts) {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\n\nfunction assertRestProperty(node, opts) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  assert(\"RestProperty\", node, opts);\n}\n\nfunction assertSpreadProperty(node, opts) {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}","map":{"version":3,"sources":["C:/Users/zhfld/git/Study_springBoot/Study_SpringBoot/src/main/webapp/node_modules/@babel/types/lib/asserts/generated/index.js"],"names":["Object","defineProperty","exports","value","assertAnyTypeAnnotation","assertArgumentPlaceholder","assertArrayExpression","assertArrayPattern","assertArrayTypeAnnotation","assertArrowFunctionExpression","assertAssignmentExpression","assertAssignmentPattern","assertAwaitExpression","assertBigIntLiteral","assertBinary","assertBinaryExpression","assertBindExpression","assertBlock","assertBlockParent","assertBlockStatement","assertBooleanLiteral","assertBooleanLiteralTypeAnnotation","assertBooleanTypeAnnotation","assertBreakStatement","assertCallExpression","assertCatchClause","assertClass","assertClassBody","assertClassDeclaration","assertClassExpression","assertClassImplements","assertClassMethod","assertClassPrivateMethod","assertClassPrivateProperty","assertClassProperty","assertCompletionStatement","assertConditional","assertConditionalExpression","assertContinueStatement","assertDebuggerStatement","assertDecimalLiteral","assertDeclaration","assertDeclareClass","assertDeclareExportAllDeclaration","assertDeclareExportDeclaration","assertDeclareFunction","assertDeclareInterface","assertDeclareModule","assertDeclareModuleExports","assertDeclareOpaqueType","assertDeclareTypeAlias","assertDeclareVariable","assertDeclaredPredicate","assertDecorator","assertDirective","assertDirectiveLiteral","assertDoExpression","assertDoWhileStatement","assertEmptyStatement","assertEmptyTypeAnnotation","assertEnumBody","assertEnumBooleanBody","assertEnumBooleanMember","assertEnumDeclaration","assertEnumDefaultedMember","assertEnumMember","assertEnumNumberBody","assertEnumNumberMember","assertEnumStringBody","assertEnumStringMember","assertEnumSymbolBody","assertExistsTypeAnnotation","assertExportAllDeclaration","assertExportDeclaration","assertExportDefaultDeclaration","assertExportDefaultSpecifier","assertExportNamedDeclaration","assertExportNamespaceSpecifier","assertExportSpecifier","assertExpression","assertExpressionStatement","assertExpressionWrapper","assertFile","assertFlow","assertFlowBaseAnnotation","assertFlowDeclaration","assertFlowPredicate","assertFlowType","assertFor","assertForInStatement","assertForOfStatement","assertForStatement","assertForXStatement","assertFunction","assertFunctionDeclaration","assertFunctionExpression","assertFunctionParent","assertFunctionTypeAnnotation","assertFunctionTypeParam","assertGenericTypeAnnotation","assertIdentifier","assertIfStatement","assertImmutable","assertImport","assertImportAttribute","assertImportDeclaration","assertImportDefaultSpecifier","assertImportNamespaceSpecifier","assertImportSpecifier","assertIndexedAccessType","assertInferredPredicate","assertInterfaceDeclaration","assertInterfaceExtends","assertInterfaceTypeAnnotation","assertInterpreterDirective","assertIntersectionTypeAnnotation","assertJSX","assertJSXAttribute","assertJSXClosingElement","assertJSXClosingFragment","assertJSXElement","assertJSXEmptyExpression","assertJSXExpressionContainer","assertJSXFragment","assertJSXIdentifier","assertJSXMemberExpression","assertJSXNamespacedName","assertJSXOpeningElement","assertJSXOpeningFragment","assertJSXSpreadAttribute","assertJSXSpreadChild","assertJSXText","assertLVal","assertLabeledStatement","assertLiteral","assertLogicalExpression","assertLoop","assertMemberExpression","assertMetaProperty","assertMethod","assertMiscellaneous","assertMixedTypeAnnotation","assertModuleDeclaration","assertModuleExpression","assertModuleSpecifier","assertNewExpression","assertNoop","assertNullLiteral","assertNullLiteralTypeAnnotation","assertNullableTypeAnnotation","assertNumberLiteral","assertNumberLiteralTypeAnnotation","assertNumberTypeAnnotation","assertNumericLiteral","assertObjectExpression","assertObjectMember","assertObjectMethod","assertObjectPattern","assertObjectProperty","assertObjectTypeAnnotation","assertObjectTypeCallProperty","assertObjectTypeIndexer","assertObjectTypeInternalSlot","assertObjectTypeProperty","assertObjectTypeSpreadProperty","assertOpaqueType","assertOptionalCallExpression","assertOptionalIndexedAccessType","assertOptionalMemberExpression","assertParenthesizedExpression","assertPattern","assertPatternLike","assertPipelineBareFunction","assertPipelinePrimaryTopicReference","assertPipelineTopicExpression","assertPlaceholder","assertPrivate","assertPrivateName","assertProgram","assertProperty","assertPureish","assertQualifiedTypeIdentifier","assertRecordExpression","assertRegExpLiteral","assertRegexLiteral","assertRestElement","assertRestProperty","assertReturnStatement","assertScopable","assertSequenceExpression","assertSpreadElement","assertSpreadProperty","assertStandardized","assertStatement","assertStaticBlock","assertStringLiteral","assertStringLiteralTypeAnnotation","assertStringTypeAnnotation","assertSuper","assertSwitchCase","assertSwitchStatement","assertSymbolTypeAnnotation","assertTSAnyKeyword","assertTSArrayType","assertTSAsExpression","assertTSBaseType","assertTSBigIntKeyword","assertTSBooleanKeyword","assertTSCallSignatureDeclaration","assertTSConditionalType","assertTSConstructSignatureDeclaration","assertTSConstructorType","assertTSDeclareFunction","assertTSDeclareMethod","assertTSEntityName","assertTSEnumDeclaration","assertTSEnumMember","assertTSExportAssignment","assertTSExpressionWithTypeArguments","assertTSExternalModuleReference","assertTSFunctionType","assertTSImportEqualsDeclaration","assertTSImportType","assertTSIndexSignature","assertTSIndexedAccessType","assertTSInferType","assertTSInterfaceBody","assertTSInterfaceDeclaration","assertTSIntersectionType","assertTSIntrinsicKeyword","assertTSLiteralType","assertTSMappedType","assertTSMethodSignature","assertTSModuleBlock","assertTSModuleDeclaration","assertTSNamedTupleMember","assertTSNamespaceExportDeclaration","assertTSNeverKeyword","assertTSNonNullExpression","assertTSNullKeyword","assertTSNumberKeyword","assertTSObjectKeyword","assertTSOptionalType","assertTSParameterProperty","assertTSParenthesizedType","assertTSPropertySignature","assertTSQualifiedName","assertTSRestType","assertTSStringKeyword","assertTSSymbolKeyword","assertTSThisType","assertTSTupleType","assertTSType","assertTSTypeAliasDeclaration","assertTSTypeAnnotation","assertTSTypeAssertion","assertTSTypeElement","assertTSTypeLiteral","assertTSTypeOperator","assertTSTypeParameter","assertTSTypeParameterDeclaration","assertTSTypeParameterInstantiation","assertTSTypePredicate","assertTSTypeQuery","assertTSTypeReference","assertTSUndefinedKeyword","assertTSUnionType","assertTSUnknownKeyword","assertTSVoidKeyword","assertTaggedTemplateExpression","assertTemplateElement","assertTemplateLiteral","assertTerminatorless","assertThisExpression","assertThisTypeAnnotation","assertThrowStatement","assertTopicReference","assertTryStatement","assertTupleExpression","assertTupleTypeAnnotation","assertTypeAlias","assertTypeAnnotation","assertTypeCastExpression","assertTypeParameter","assertTypeParameterDeclaration","assertTypeParameterInstantiation","assertTypeScript","assertTypeofTypeAnnotation","assertUnaryExpression","assertUnaryLike","assertUnionTypeAnnotation","assertUpdateExpression","assertUserWhitespacable","assertV8IntrinsicIdentifier","assertVariableDeclaration","assertVariableDeclarator","assertVariance","assertVoidTypeAnnotation","assertWhile","assertWhileStatement","assertWithStatement","assertYieldExpression","_is","require","assert","type","node","opts","default","Error","JSON","stringify","console","trace"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\r\nexports.assertArgumentPlaceholder = assertArgumentPlaceholder;\r\nexports.assertArrayExpression = assertArrayExpression;\r\nexports.assertArrayPattern = assertArrayPattern;\r\nexports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\r\nexports.assertArrowFunctionExpression = assertArrowFunctionExpression;\r\nexports.assertAssignmentExpression = assertAssignmentExpression;\r\nexports.assertAssignmentPattern = assertAssignmentPattern;\r\nexports.assertAwaitExpression = assertAwaitExpression;\r\nexports.assertBigIntLiteral = assertBigIntLiteral;\r\nexports.assertBinary = assertBinary;\r\nexports.assertBinaryExpression = assertBinaryExpression;\r\nexports.assertBindExpression = assertBindExpression;\r\nexports.assertBlock = assertBlock;\r\nexports.assertBlockParent = assertBlockParent;\r\nexports.assertBlockStatement = assertBlockStatement;\r\nexports.assertBooleanLiteral = assertBooleanLiteral;\r\nexports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\r\nexports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\r\nexports.assertBreakStatement = assertBreakStatement;\r\nexports.assertCallExpression = assertCallExpression;\r\nexports.assertCatchClause = assertCatchClause;\r\nexports.assertClass = assertClass;\r\nexports.assertClassBody = assertClassBody;\r\nexports.assertClassDeclaration = assertClassDeclaration;\r\nexports.assertClassExpression = assertClassExpression;\r\nexports.assertClassImplements = assertClassImplements;\r\nexports.assertClassMethod = assertClassMethod;\r\nexports.assertClassPrivateMethod = assertClassPrivateMethod;\r\nexports.assertClassPrivateProperty = assertClassPrivateProperty;\r\nexports.assertClassProperty = assertClassProperty;\r\nexports.assertCompletionStatement = assertCompletionStatement;\r\nexports.assertConditional = assertConditional;\r\nexports.assertConditionalExpression = assertConditionalExpression;\r\nexports.assertContinueStatement = assertContinueStatement;\r\nexports.assertDebuggerStatement = assertDebuggerStatement;\r\nexports.assertDecimalLiteral = assertDecimalLiteral;\r\nexports.assertDeclaration = assertDeclaration;\r\nexports.assertDeclareClass = assertDeclareClass;\r\nexports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\r\nexports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\r\nexports.assertDeclareFunction = assertDeclareFunction;\r\nexports.assertDeclareInterface = assertDeclareInterface;\r\nexports.assertDeclareModule = assertDeclareModule;\r\nexports.assertDeclareModuleExports = assertDeclareModuleExports;\r\nexports.assertDeclareOpaqueType = assertDeclareOpaqueType;\r\nexports.assertDeclareTypeAlias = assertDeclareTypeAlias;\r\nexports.assertDeclareVariable = assertDeclareVariable;\r\nexports.assertDeclaredPredicate = assertDeclaredPredicate;\r\nexports.assertDecorator = assertDecorator;\r\nexports.assertDirective = assertDirective;\r\nexports.assertDirectiveLiteral = assertDirectiveLiteral;\r\nexports.assertDoExpression = assertDoExpression;\r\nexports.assertDoWhileStatement = assertDoWhileStatement;\r\nexports.assertEmptyStatement = assertEmptyStatement;\r\nexports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\r\nexports.assertEnumBody = assertEnumBody;\r\nexports.assertEnumBooleanBody = assertEnumBooleanBody;\r\nexports.assertEnumBooleanMember = assertEnumBooleanMember;\r\nexports.assertEnumDeclaration = assertEnumDeclaration;\r\nexports.assertEnumDefaultedMember = assertEnumDefaultedMember;\r\nexports.assertEnumMember = assertEnumMember;\r\nexports.assertEnumNumberBody = assertEnumNumberBody;\r\nexports.assertEnumNumberMember = assertEnumNumberMember;\r\nexports.assertEnumStringBody = assertEnumStringBody;\r\nexports.assertEnumStringMember = assertEnumStringMember;\r\nexports.assertEnumSymbolBody = assertEnumSymbolBody;\r\nexports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\r\nexports.assertExportAllDeclaration = assertExportAllDeclaration;\r\nexports.assertExportDeclaration = assertExportDeclaration;\r\nexports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\r\nexports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\r\nexports.assertExportNamedDeclaration = assertExportNamedDeclaration;\r\nexports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\r\nexports.assertExportSpecifier = assertExportSpecifier;\r\nexports.assertExpression = assertExpression;\r\nexports.assertExpressionStatement = assertExpressionStatement;\r\nexports.assertExpressionWrapper = assertExpressionWrapper;\r\nexports.assertFile = assertFile;\r\nexports.assertFlow = assertFlow;\r\nexports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\r\nexports.assertFlowDeclaration = assertFlowDeclaration;\r\nexports.assertFlowPredicate = assertFlowPredicate;\r\nexports.assertFlowType = assertFlowType;\r\nexports.assertFor = assertFor;\r\nexports.assertForInStatement = assertForInStatement;\r\nexports.assertForOfStatement = assertForOfStatement;\r\nexports.assertForStatement = assertForStatement;\r\nexports.assertForXStatement = assertForXStatement;\r\nexports.assertFunction = assertFunction;\r\nexports.assertFunctionDeclaration = assertFunctionDeclaration;\r\nexports.assertFunctionExpression = assertFunctionExpression;\r\nexports.assertFunctionParent = assertFunctionParent;\r\nexports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\r\nexports.assertFunctionTypeParam = assertFunctionTypeParam;\r\nexports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\r\nexports.assertIdentifier = assertIdentifier;\r\nexports.assertIfStatement = assertIfStatement;\r\nexports.assertImmutable = assertImmutable;\r\nexports.assertImport = assertImport;\r\nexports.assertImportAttribute = assertImportAttribute;\r\nexports.assertImportDeclaration = assertImportDeclaration;\r\nexports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\r\nexports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\r\nexports.assertImportSpecifier = assertImportSpecifier;\r\nexports.assertIndexedAccessType = assertIndexedAccessType;\r\nexports.assertInferredPredicate = assertInferredPredicate;\r\nexports.assertInterfaceDeclaration = assertInterfaceDeclaration;\r\nexports.assertInterfaceExtends = assertInterfaceExtends;\r\nexports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\r\nexports.assertInterpreterDirective = assertInterpreterDirective;\r\nexports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\r\nexports.assertJSX = assertJSX;\r\nexports.assertJSXAttribute = assertJSXAttribute;\r\nexports.assertJSXClosingElement = assertJSXClosingElement;\r\nexports.assertJSXClosingFragment = assertJSXClosingFragment;\r\nexports.assertJSXElement = assertJSXElement;\r\nexports.assertJSXEmptyExpression = assertJSXEmptyExpression;\r\nexports.assertJSXExpressionContainer = assertJSXExpressionContainer;\r\nexports.assertJSXFragment = assertJSXFragment;\r\nexports.assertJSXIdentifier = assertJSXIdentifier;\r\nexports.assertJSXMemberExpression = assertJSXMemberExpression;\r\nexports.assertJSXNamespacedName = assertJSXNamespacedName;\r\nexports.assertJSXOpeningElement = assertJSXOpeningElement;\r\nexports.assertJSXOpeningFragment = assertJSXOpeningFragment;\r\nexports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\r\nexports.assertJSXSpreadChild = assertJSXSpreadChild;\r\nexports.assertJSXText = assertJSXText;\r\nexports.assertLVal = assertLVal;\r\nexports.assertLabeledStatement = assertLabeledStatement;\r\nexports.assertLiteral = assertLiteral;\r\nexports.assertLogicalExpression = assertLogicalExpression;\r\nexports.assertLoop = assertLoop;\r\nexports.assertMemberExpression = assertMemberExpression;\r\nexports.assertMetaProperty = assertMetaProperty;\r\nexports.assertMethod = assertMethod;\r\nexports.assertMiscellaneous = assertMiscellaneous;\r\nexports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\r\nexports.assertModuleDeclaration = assertModuleDeclaration;\r\nexports.assertModuleExpression = assertModuleExpression;\r\nexports.assertModuleSpecifier = assertModuleSpecifier;\r\nexports.assertNewExpression = assertNewExpression;\r\nexports.assertNoop = assertNoop;\r\nexports.assertNullLiteral = assertNullLiteral;\r\nexports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\r\nexports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\r\nexports.assertNumberLiteral = assertNumberLiteral;\r\nexports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\r\nexports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\r\nexports.assertNumericLiteral = assertNumericLiteral;\r\nexports.assertObjectExpression = assertObjectExpression;\r\nexports.assertObjectMember = assertObjectMember;\r\nexports.assertObjectMethod = assertObjectMethod;\r\nexports.assertObjectPattern = assertObjectPattern;\r\nexports.assertObjectProperty = assertObjectProperty;\r\nexports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\r\nexports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\r\nexports.assertObjectTypeIndexer = assertObjectTypeIndexer;\r\nexports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\r\nexports.assertObjectTypeProperty = assertObjectTypeProperty;\r\nexports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\r\nexports.assertOpaqueType = assertOpaqueType;\r\nexports.assertOptionalCallExpression = assertOptionalCallExpression;\r\nexports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;\r\nexports.assertOptionalMemberExpression = assertOptionalMemberExpression;\r\nexports.assertParenthesizedExpression = assertParenthesizedExpression;\r\nexports.assertPattern = assertPattern;\r\nexports.assertPatternLike = assertPatternLike;\r\nexports.assertPipelineBareFunction = assertPipelineBareFunction;\r\nexports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\r\nexports.assertPipelineTopicExpression = assertPipelineTopicExpression;\r\nexports.assertPlaceholder = assertPlaceholder;\r\nexports.assertPrivate = assertPrivate;\r\nexports.assertPrivateName = assertPrivateName;\r\nexports.assertProgram = assertProgram;\r\nexports.assertProperty = assertProperty;\r\nexports.assertPureish = assertPureish;\r\nexports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\r\nexports.assertRecordExpression = assertRecordExpression;\r\nexports.assertRegExpLiteral = assertRegExpLiteral;\r\nexports.assertRegexLiteral = assertRegexLiteral;\r\nexports.assertRestElement = assertRestElement;\r\nexports.assertRestProperty = assertRestProperty;\r\nexports.assertReturnStatement = assertReturnStatement;\r\nexports.assertScopable = assertScopable;\r\nexports.assertSequenceExpression = assertSequenceExpression;\r\nexports.assertSpreadElement = assertSpreadElement;\r\nexports.assertSpreadProperty = assertSpreadProperty;\r\nexports.assertStandardized = assertStandardized;\r\nexports.assertStatement = assertStatement;\r\nexports.assertStaticBlock = assertStaticBlock;\r\nexports.assertStringLiteral = assertStringLiteral;\r\nexports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\r\nexports.assertStringTypeAnnotation = assertStringTypeAnnotation;\r\nexports.assertSuper = assertSuper;\r\nexports.assertSwitchCase = assertSwitchCase;\r\nexports.assertSwitchStatement = assertSwitchStatement;\r\nexports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;\r\nexports.assertTSAnyKeyword = assertTSAnyKeyword;\r\nexports.assertTSArrayType = assertTSArrayType;\r\nexports.assertTSAsExpression = assertTSAsExpression;\r\nexports.assertTSBaseType = assertTSBaseType;\r\nexports.assertTSBigIntKeyword = assertTSBigIntKeyword;\r\nexports.assertTSBooleanKeyword = assertTSBooleanKeyword;\r\nexports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\r\nexports.assertTSConditionalType = assertTSConditionalType;\r\nexports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\r\nexports.assertTSConstructorType = assertTSConstructorType;\r\nexports.assertTSDeclareFunction = assertTSDeclareFunction;\r\nexports.assertTSDeclareMethod = assertTSDeclareMethod;\r\nexports.assertTSEntityName = assertTSEntityName;\r\nexports.assertTSEnumDeclaration = assertTSEnumDeclaration;\r\nexports.assertTSEnumMember = assertTSEnumMember;\r\nexports.assertTSExportAssignment = assertTSExportAssignment;\r\nexports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\r\nexports.assertTSExternalModuleReference = assertTSExternalModuleReference;\r\nexports.assertTSFunctionType = assertTSFunctionType;\r\nexports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\r\nexports.assertTSImportType = assertTSImportType;\r\nexports.assertTSIndexSignature = assertTSIndexSignature;\r\nexports.assertTSIndexedAccessType = assertTSIndexedAccessType;\r\nexports.assertTSInferType = assertTSInferType;\r\nexports.assertTSInterfaceBody = assertTSInterfaceBody;\r\nexports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\r\nexports.assertTSIntersectionType = assertTSIntersectionType;\r\nexports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;\r\nexports.assertTSLiteralType = assertTSLiteralType;\r\nexports.assertTSMappedType = assertTSMappedType;\r\nexports.assertTSMethodSignature = assertTSMethodSignature;\r\nexports.assertTSModuleBlock = assertTSModuleBlock;\r\nexports.assertTSModuleDeclaration = assertTSModuleDeclaration;\r\nexports.assertTSNamedTupleMember = assertTSNamedTupleMember;\r\nexports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\r\nexports.assertTSNeverKeyword = assertTSNeverKeyword;\r\nexports.assertTSNonNullExpression = assertTSNonNullExpression;\r\nexports.assertTSNullKeyword = assertTSNullKeyword;\r\nexports.assertTSNumberKeyword = assertTSNumberKeyword;\r\nexports.assertTSObjectKeyword = assertTSObjectKeyword;\r\nexports.assertTSOptionalType = assertTSOptionalType;\r\nexports.assertTSParameterProperty = assertTSParameterProperty;\r\nexports.assertTSParenthesizedType = assertTSParenthesizedType;\r\nexports.assertTSPropertySignature = assertTSPropertySignature;\r\nexports.assertTSQualifiedName = assertTSQualifiedName;\r\nexports.assertTSRestType = assertTSRestType;\r\nexports.assertTSStringKeyword = assertTSStringKeyword;\r\nexports.assertTSSymbolKeyword = assertTSSymbolKeyword;\r\nexports.assertTSThisType = assertTSThisType;\r\nexports.assertTSTupleType = assertTSTupleType;\r\nexports.assertTSType = assertTSType;\r\nexports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\r\nexports.assertTSTypeAnnotation = assertTSTypeAnnotation;\r\nexports.assertTSTypeAssertion = assertTSTypeAssertion;\r\nexports.assertTSTypeElement = assertTSTypeElement;\r\nexports.assertTSTypeLiteral = assertTSTypeLiteral;\r\nexports.assertTSTypeOperator = assertTSTypeOperator;\r\nexports.assertTSTypeParameter = assertTSTypeParameter;\r\nexports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\r\nexports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\r\nexports.assertTSTypePredicate = assertTSTypePredicate;\r\nexports.assertTSTypeQuery = assertTSTypeQuery;\r\nexports.assertTSTypeReference = assertTSTypeReference;\r\nexports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\r\nexports.assertTSUnionType = assertTSUnionType;\r\nexports.assertTSUnknownKeyword = assertTSUnknownKeyword;\r\nexports.assertTSVoidKeyword = assertTSVoidKeyword;\r\nexports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\r\nexports.assertTemplateElement = assertTemplateElement;\r\nexports.assertTemplateLiteral = assertTemplateLiteral;\r\nexports.assertTerminatorless = assertTerminatorless;\r\nexports.assertThisExpression = assertThisExpression;\r\nexports.assertThisTypeAnnotation = assertThisTypeAnnotation;\r\nexports.assertThrowStatement = assertThrowStatement;\r\nexports.assertTopicReference = assertTopicReference;\r\nexports.assertTryStatement = assertTryStatement;\r\nexports.assertTupleExpression = assertTupleExpression;\r\nexports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\r\nexports.assertTypeAlias = assertTypeAlias;\r\nexports.assertTypeAnnotation = assertTypeAnnotation;\r\nexports.assertTypeCastExpression = assertTypeCastExpression;\r\nexports.assertTypeParameter = assertTypeParameter;\r\nexports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\r\nexports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\r\nexports.assertTypeScript = assertTypeScript;\r\nexports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\r\nexports.assertUnaryExpression = assertUnaryExpression;\r\nexports.assertUnaryLike = assertUnaryLike;\r\nexports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\r\nexports.assertUpdateExpression = assertUpdateExpression;\r\nexports.assertUserWhitespacable = assertUserWhitespacable;\r\nexports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\r\nexports.assertVariableDeclaration = assertVariableDeclaration;\r\nexports.assertVariableDeclarator = assertVariableDeclarator;\r\nexports.assertVariance = assertVariance;\r\nexports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\r\nexports.assertWhile = assertWhile;\r\nexports.assertWhileStatement = assertWhileStatement;\r\nexports.assertWithStatement = assertWithStatement;\r\nexports.assertYieldExpression = assertYieldExpression;\r\n\r\nvar _is = require(\"../../validators/is\");\r\n\r\nfunction assert(type, node, opts) {\r\n  if (!(0, _is.default)(type, node, opts)) {\r\n    throw new Error(`Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` + `but instead got \"${node.type}\".`);\r\n  }\r\n}\r\n\r\nfunction assertArrayExpression(node, opts) {\r\n  assert(\"ArrayExpression\", node, opts);\r\n}\r\n\r\nfunction assertAssignmentExpression(node, opts) {\r\n  assert(\"AssignmentExpression\", node, opts);\r\n}\r\n\r\nfunction assertBinaryExpression(node, opts) {\r\n  assert(\"BinaryExpression\", node, opts);\r\n}\r\n\r\nfunction assertInterpreterDirective(node, opts) {\r\n  assert(\"InterpreterDirective\", node, opts);\r\n}\r\n\r\nfunction assertDirective(node, opts) {\r\n  assert(\"Directive\", node, opts);\r\n}\r\n\r\nfunction assertDirectiveLiteral(node, opts) {\r\n  assert(\"DirectiveLiteral\", node, opts);\r\n}\r\n\r\nfunction assertBlockStatement(node, opts) {\r\n  assert(\"BlockStatement\", node, opts);\r\n}\r\n\r\nfunction assertBreakStatement(node, opts) {\r\n  assert(\"BreakStatement\", node, opts);\r\n}\r\n\r\nfunction assertCallExpression(node, opts) {\r\n  assert(\"CallExpression\", node, opts);\r\n}\r\n\r\nfunction assertCatchClause(node, opts) {\r\n  assert(\"CatchClause\", node, opts);\r\n}\r\n\r\nfunction assertConditionalExpression(node, opts) {\r\n  assert(\"ConditionalExpression\", node, opts);\r\n}\r\n\r\nfunction assertContinueStatement(node, opts) {\r\n  assert(\"ContinueStatement\", node, opts);\r\n}\r\n\r\nfunction assertDebuggerStatement(node, opts) {\r\n  assert(\"DebuggerStatement\", node, opts);\r\n}\r\n\r\nfunction assertDoWhileStatement(node, opts) {\r\n  assert(\"DoWhileStatement\", node, opts);\r\n}\r\n\r\nfunction assertEmptyStatement(node, opts) {\r\n  assert(\"EmptyStatement\", node, opts);\r\n}\r\n\r\nfunction assertExpressionStatement(node, opts) {\r\n  assert(\"ExpressionStatement\", node, opts);\r\n}\r\n\r\nfunction assertFile(node, opts) {\r\n  assert(\"File\", node, opts);\r\n}\r\n\r\nfunction assertForInStatement(node, opts) {\r\n  assert(\"ForInStatement\", node, opts);\r\n}\r\n\r\nfunction assertForStatement(node, opts) {\r\n  assert(\"ForStatement\", node, opts);\r\n}\r\n\r\nfunction assertFunctionDeclaration(node, opts) {\r\n  assert(\"FunctionDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertFunctionExpression(node, opts) {\r\n  assert(\"FunctionExpression\", node, opts);\r\n}\r\n\r\nfunction assertIdentifier(node, opts) {\r\n  assert(\"Identifier\", node, opts);\r\n}\r\n\r\nfunction assertIfStatement(node, opts) {\r\n  assert(\"IfStatement\", node, opts);\r\n}\r\n\r\nfunction assertLabeledStatement(node, opts) {\r\n  assert(\"LabeledStatement\", node, opts);\r\n}\r\n\r\nfunction assertStringLiteral(node, opts) {\r\n  assert(\"StringLiteral\", node, opts);\r\n}\r\n\r\nfunction assertNumericLiteral(node, opts) {\r\n  assert(\"NumericLiteral\", node, opts);\r\n}\r\n\r\nfunction assertNullLiteral(node, opts) {\r\n  assert(\"NullLiteral\", node, opts);\r\n}\r\n\r\nfunction assertBooleanLiteral(node, opts) {\r\n  assert(\"BooleanLiteral\", node, opts);\r\n}\r\n\r\nfunction assertRegExpLiteral(node, opts) {\r\n  assert(\"RegExpLiteral\", node, opts);\r\n}\r\n\r\nfunction assertLogicalExpression(node, opts) {\r\n  assert(\"LogicalExpression\", node, opts);\r\n}\r\n\r\nfunction assertMemberExpression(node, opts) {\r\n  assert(\"MemberExpression\", node, opts);\r\n}\r\n\r\nfunction assertNewExpression(node, opts) {\r\n  assert(\"NewExpression\", node, opts);\r\n}\r\n\r\nfunction assertProgram(node, opts) {\r\n  assert(\"Program\", node, opts);\r\n}\r\n\r\nfunction assertObjectExpression(node, opts) {\r\n  assert(\"ObjectExpression\", node, opts);\r\n}\r\n\r\nfunction assertObjectMethod(node, opts) {\r\n  assert(\"ObjectMethod\", node, opts);\r\n}\r\n\r\nfunction assertObjectProperty(node, opts) {\r\n  assert(\"ObjectProperty\", node, opts);\r\n}\r\n\r\nfunction assertRestElement(node, opts) {\r\n  assert(\"RestElement\", node, opts);\r\n}\r\n\r\nfunction assertReturnStatement(node, opts) {\r\n  assert(\"ReturnStatement\", node, opts);\r\n}\r\n\r\nfunction assertSequenceExpression(node, opts) {\r\n  assert(\"SequenceExpression\", node, opts);\r\n}\r\n\r\nfunction assertParenthesizedExpression(node, opts) {\r\n  assert(\"ParenthesizedExpression\", node, opts);\r\n}\r\n\r\nfunction assertSwitchCase(node, opts) {\r\n  assert(\"SwitchCase\", node, opts);\r\n}\r\n\r\nfunction assertSwitchStatement(node, opts) {\r\n  assert(\"SwitchStatement\", node, opts);\r\n}\r\n\r\nfunction assertThisExpression(node, opts) {\r\n  assert(\"ThisExpression\", node, opts);\r\n}\r\n\r\nfunction assertThrowStatement(node, opts) {\r\n  assert(\"ThrowStatement\", node, opts);\r\n}\r\n\r\nfunction assertTryStatement(node, opts) {\r\n  assert(\"TryStatement\", node, opts);\r\n}\r\n\r\nfunction assertUnaryExpression(node, opts) {\r\n  assert(\"UnaryExpression\", node, opts);\r\n}\r\n\r\nfunction assertUpdateExpression(node, opts) {\r\n  assert(\"UpdateExpression\", node, opts);\r\n}\r\n\r\nfunction assertVariableDeclaration(node, opts) {\r\n  assert(\"VariableDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertVariableDeclarator(node, opts) {\r\n  assert(\"VariableDeclarator\", node, opts);\r\n}\r\n\r\nfunction assertWhileStatement(node, opts) {\r\n  assert(\"WhileStatement\", node, opts);\r\n}\r\n\r\nfunction assertWithStatement(node, opts) {\r\n  assert(\"WithStatement\", node, opts);\r\n}\r\n\r\nfunction assertAssignmentPattern(node, opts) {\r\n  assert(\"AssignmentPattern\", node, opts);\r\n}\r\n\r\nfunction assertArrayPattern(node, opts) {\r\n  assert(\"ArrayPattern\", node, opts);\r\n}\r\n\r\nfunction assertArrowFunctionExpression(node, opts) {\r\n  assert(\"ArrowFunctionExpression\", node, opts);\r\n}\r\n\r\nfunction assertClassBody(node, opts) {\r\n  assert(\"ClassBody\", node, opts);\r\n}\r\n\r\nfunction assertClassExpression(node, opts) {\r\n  assert(\"ClassExpression\", node, opts);\r\n}\r\n\r\nfunction assertClassDeclaration(node, opts) {\r\n  assert(\"ClassDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertExportAllDeclaration(node, opts) {\r\n  assert(\"ExportAllDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertExportDefaultDeclaration(node, opts) {\r\n  assert(\"ExportDefaultDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertExportNamedDeclaration(node, opts) {\r\n  assert(\"ExportNamedDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertExportSpecifier(node, opts) {\r\n  assert(\"ExportSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertForOfStatement(node, opts) {\r\n  assert(\"ForOfStatement\", node, opts);\r\n}\r\n\r\nfunction assertImportDeclaration(node, opts) {\r\n  assert(\"ImportDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertImportDefaultSpecifier(node, opts) {\r\n  assert(\"ImportDefaultSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertImportNamespaceSpecifier(node, opts) {\r\n  assert(\"ImportNamespaceSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertImportSpecifier(node, opts) {\r\n  assert(\"ImportSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertMetaProperty(node, opts) {\r\n  assert(\"MetaProperty\", node, opts);\r\n}\r\n\r\nfunction assertClassMethod(node, opts) {\r\n  assert(\"ClassMethod\", node, opts);\r\n}\r\n\r\nfunction assertObjectPattern(node, opts) {\r\n  assert(\"ObjectPattern\", node, opts);\r\n}\r\n\r\nfunction assertSpreadElement(node, opts) {\r\n  assert(\"SpreadElement\", node, opts);\r\n}\r\n\r\nfunction assertSuper(node, opts) {\r\n  assert(\"Super\", node, opts);\r\n}\r\n\r\nfunction assertTaggedTemplateExpression(node, opts) {\r\n  assert(\"TaggedTemplateExpression\", node, opts);\r\n}\r\n\r\nfunction assertTemplateElement(node, opts) {\r\n  assert(\"TemplateElement\", node, opts);\r\n}\r\n\r\nfunction assertTemplateLiteral(node, opts) {\r\n  assert(\"TemplateLiteral\", node, opts);\r\n}\r\n\r\nfunction assertYieldExpression(node, opts) {\r\n  assert(\"YieldExpression\", node, opts);\r\n}\r\n\r\nfunction assertAwaitExpression(node, opts) {\r\n  assert(\"AwaitExpression\", node, opts);\r\n}\r\n\r\nfunction assertImport(node, opts) {\r\n  assert(\"Import\", node, opts);\r\n}\r\n\r\nfunction assertBigIntLiteral(node, opts) {\r\n  assert(\"BigIntLiteral\", node, opts);\r\n}\r\n\r\nfunction assertExportNamespaceSpecifier(node, opts) {\r\n  assert(\"ExportNamespaceSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertOptionalMemberExpression(node, opts) {\r\n  assert(\"OptionalMemberExpression\", node, opts);\r\n}\r\n\r\nfunction assertOptionalCallExpression(node, opts) {\r\n  assert(\"OptionalCallExpression\", node, opts);\r\n}\r\n\r\nfunction assertClassProperty(node, opts) {\r\n  assert(\"ClassProperty\", node, opts);\r\n}\r\n\r\nfunction assertClassPrivateProperty(node, opts) {\r\n  assert(\"ClassPrivateProperty\", node, opts);\r\n}\r\n\r\nfunction assertClassPrivateMethod(node, opts) {\r\n  assert(\"ClassPrivateMethod\", node, opts);\r\n}\r\n\r\nfunction assertPrivateName(node, opts) {\r\n  assert(\"PrivateName\", node, opts);\r\n}\r\n\r\nfunction assertStaticBlock(node, opts) {\r\n  assert(\"StaticBlock\", node, opts);\r\n}\r\n\r\nfunction assertAnyTypeAnnotation(node, opts) {\r\n  assert(\"AnyTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertArrayTypeAnnotation(node, opts) {\r\n  assert(\"ArrayTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertBooleanTypeAnnotation(node, opts) {\r\n  assert(\"BooleanTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertBooleanLiteralTypeAnnotation(node, opts) {\r\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertNullLiteralTypeAnnotation(node, opts) {\r\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertClassImplements(node, opts) {\r\n  assert(\"ClassImplements\", node, opts);\r\n}\r\n\r\nfunction assertDeclareClass(node, opts) {\r\n  assert(\"DeclareClass\", node, opts);\r\n}\r\n\r\nfunction assertDeclareFunction(node, opts) {\r\n  assert(\"DeclareFunction\", node, opts);\r\n}\r\n\r\nfunction assertDeclareInterface(node, opts) {\r\n  assert(\"DeclareInterface\", node, opts);\r\n}\r\n\r\nfunction assertDeclareModule(node, opts) {\r\n  assert(\"DeclareModule\", node, opts);\r\n}\r\n\r\nfunction assertDeclareModuleExports(node, opts) {\r\n  assert(\"DeclareModuleExports\", node, opts);\r\n}\r\n\r\nfunction assertDeclareTypeAlias(node, opts) {\r\n  assert(\"DeclareTypeAlias\", node, opts);\r\n}\r\n\r\nfunction assertDeclareOpaqueType(node, opts) {\r\n  assert(\"DeclareOpaqueType\", node, opts);\r\n}\r\n\r\nfunction assertDeclareVariable(node, opts) {\r\n  assert(\"DeclareVariable\", node, opts);\r\n}\r\n\r\nfunction assertDeclareExportDeclaration(node, opts) {\r\n  assert(\"DeclareExportDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertDeclareExportAllDeclaration(node, opts) {\r\n  assert(\"DeclareExportAllDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertDeclaredPredicate(node, opts) {\r\n  assert(\"DeclaredPredicate\", node, opts);\r\n}\r\n\r\nfunction assertExistsTypeAnnotation(node, opts) {\r\n  assert(\"ExistsTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertFunctionTypeAnnotation(node, opts) {\r\n  assert(\"FunctionTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertFunctionTypeParam(node, opts) {\r\n  assert(\"FunctionTypeParam\", node, opts);\r\n}\r\n\r\nfunction assertGenericTypeAnnotation(node, opts) {\r\n  assert(\"GenericTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertInferredPredicate(node, opts) {\r\n  assert(\"InferredPredicate\", node, opts);\r\n}\r\n\r\nfunction assertInterfaceExtends(node, opts) {\r\n  assert(\"InterfaceExtends\", node, opts);\r\n}\r\n\r\nfunction assertInterfaceDeclaration(node, opts) {\r\n  assert(\"InterfaceDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertInterfaceTypeAnnotation(node, opts) {\r\n  assert(\"InterfaceTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertIntersectionTypeAnnotation(node, opts) {\r\n  assert(\"IntersectionTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertMixedTypeAnnotation(node, opts) {\r\n  assert(\"MixedTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertEmptyTypeAnnotation(node, opts) {\r\n  assert(\"EmptyTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertNullableTypeAnnotation(node, opts) {\r\n  assert(\"NullableTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertNumberLiteralTypeAnnotation(node, opts) {\r\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertNumberTypeAnnotation(node, opts) {\r\n  assert(\"NumberTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeAnnotation(node, opts) {\r\n  assert(\"ObjectTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeInternalSlot(node, opts) {\r\n  assert(\"ObjectTypeInternalSlot\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeCallProperty(node, opts) {\r\n  assert(\"ObjectTypeCallProperty\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeIndexer(node, opts) {\r\n  assert(\"ObjectTypeIndexer\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeProperty(node, opts) {\r\n  assert(\"ObjectTypeProperty\", node, opts);\r\n}\r\n\r\nfunction assertObjectTypeSpreadProperty(node, opts) {\r\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\r\n}\r\n\r\nfunction assertOpaqueType(node, opts) {\r\n  assert(\"OpaqueType\", node, opts);\r\n}\r\n\r\nfunction assertQualifiedTypeIdentifier(node, opts) {\r\n  assert(\"QualifiedTypeIdentifier\", node, opts);\r\n}\r\n\r\nfunction assertStringLiteralTypeAnnotation(node, opts) {\r\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertStringTypeAnnotation(node, opts) {\r\n  assert(\"StringTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertSymbolTypeAnnotation(node, opts) {\r\n  assert(\"SymbolTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertThisTypeAnnotation(node, opts) {\r\n  assert(\"ThisTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertTupleTypeAnnotation(node, opts) {\r\n  assert(\"TupleTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertTypeofTypeAnnotation(node, opts) {\r\n  assert(\"TypeofTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertTypeAlias(node, opts) {\r\n  assert(\"TypeAlias\", node, opts);\r\n}\r\n\r\nfunction assertTypeAnnotation(node, opts) {\r\n  assert(\"TypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertTypeCastExpression(node, opts) {\r\n  assert(\"TypeCastExpression\", node, opts);\r\n}\r\n\r\nfunction assertTypeParameter(node, opts) {\r\n  assert(\"TypeParameter\", node, opts);\r\n}\r\n\r\nfunction assertTypeParameterDeclaration(node, opts) {\r\n  assert(\"TypeParameterDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTypeParameterInstantiation(node, opts) {\r\n  assert(\"TypeParameterInstantiation\", node, opts);\r\n}\r\n\r\nfunction assertUnionTypeAnnotation(node, opts) {\r\n  assert(\"UnionTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertVariance(node, opts) {\r\n  assert(\"Variance\", node, opts);\r\n}\r\n\r\nfunction assertVoidTypeAnnotation(node, opts) {\r\n  assert(\"VoidTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertEnumDeclaration(node, opts) {\r\n  assert(\"EnumDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertEnumBooleanBody(node, opts) {\r\n  assert(\"EnumBooleanBody\", node, opts);\r\n}\r\n\r\nfunction assertEnumNumberBody(node, opts) {\r\n  assert(\"EnumNumberBody\", node, opts);\r\n}\r\n\r\nfunction assertEnumStringBody(node, opts) {\r\n  assert(\"EnumStringBody\", node, opts);\r\n}\r\n\r\nfunction assertEnumSymbolBody(node, opts) {\r\n  assert(\"EnumSymbolBody\", node, opts);\r\n}\r\n\r\nfunction assertEnumBooleanMember(node, opts) {\r\n  assert(\"EnumBooleanMember\", node, opts);\r\n}\r\n\r\nfunction assertEnumNumberMember(node, opts) {\r\n  assert(\"EnumNumberMember\", node, opts);\r\n}\r\n\r\nfunction assertEnumStringMember(node, opts) {\r\n  assert(\"EnumStringMember\", node, opts);\r\n}\r\n\r\nfunction assertEnumDefaultedMember(node, opts) {\r\n  assert(\"EnumDefaultedMember\", node, opts);\r\n}\r\n\r\nfunction assertIndexedAccessType(node, opts) {\r\n  assert(\"IndexedAccessType\", node, opts);\r\n}\r\n\r\nfunction assertOptionalIndexedAccessType(node, opts) {\r\n  assert(\"OptionalIndexedAccessType\", node, opts);\r\n}\r\n\r\nfunction assertJSXAttribute(node, opts) {\r\n  assert(\"JSXAttribute\", node, opts);\r\n}\r\n\r\nfunction assertJSXClosingElement(node, opts) {\r\n  assert(\"JSXClosingElement\", node, opts);\r\n}\r\n\r\nfunction assertJSXElement(node, opts) {\r\n  assert(\"JSXElement\", node, opts);\r\n}\r\n\r\nfunction assertJSXEmptyExpression(node, opts) {\r\n  assert(\"JSXEmptyExpression\", node, opts);\r\n}\r\n\r\nfunction assertJSXExpressionContainer(node, opts) {\r\n  assert(\"JSXExpressionContainer\", node, opts);\r\n}\r\n\r\nfunction assertJSXSpreadChild(node, opts) {\r\n  assert(\"JSXSpreadChild\", node, opts);\r\n}\r\n\r\nfunction assertJSXIdentifier(node, opts) {\r\n  assert(\"JSXIdentifier\", node, opts);\r\n}\r\n\r\nfunction assertJSXMemberExpression(node, opts) {\r\n  assert(\"JSXMemberExpression\", node, opts);\r\n}\r\n\r\nfunction assertJSXNamespacedName(node, opts) {\r\n  assert(\"JSXNamespacedName\", node, opts);\r\n}\r\n\r\nfunction assertJSXOpeningElement(node, opts) {\r\n  assert(\"JSXOpeningElement\", node, opts);\r\n}\r\n\r\nfunction assertJSXSpreadAttribute(node, opts) {\r\n  assert(\"JSXSpreadAttribute\", node, opts);\r\n}\r\n\r\nfunction assertJSXText(node, opts) {\r\n  assert(\"JSXText\", node, opts);\r\n}\r\n\r\nfunction assertJSXFragment(node, opts) {\r\n  assert(\"JSXFragment\", node, opts);\r\n}\r\n\r\nfunction assertJSXOpeningFragment(node, opts) {\r\n  assert(\"JSXOpeningFragment\", node, opts);\r\n}\r\n\r\nfunction assertJSXClosingFragment(node, opts) {\r\n  assert(\"JSXClosingFragment\", node, opts);\r\n}\r\n\r\nfunction assertNoop(node, opts) {\r\n  assert(\"Noop\", node, opts);\r\n}\r\n\r\nfunction assertPlaceholder(node, opts) {\r\n  assert(\"Placeholder\", node, opts);\r\n}\r\n\r\nfunction assertV8IntrinsicIdentifier(node, opts) {\r\n  assert(\"V8IntrinsicIdentifier\", node, opts);\r\n}\r\n\r\nfunction assertArgumentPlaceholder(node, opts) {\r\n  assert(\"ArgumentPlaceholder\", node, opts);\r\n}\r\n\r\nfunction assertBindExpression(node, opts) {\r\n  assert(\"BindExpression\", node, opts);\r\n}\r\n\r\nfunction assertImportAttribute(node, opts) {\r\n  assert(\"ImportAttribute\", node, opts);\r\n}\r\n\r\nfunction assertDecorator(node, opts) {\r\n  assert(\"Decorator\", node, opts);\r\n}\r\n\r\nfunction assertDoExpression(node, opts) {\r\n  assert(\"DoExpression\", node, opts);\r\n}\r\n\r\nfunction assertExportDefaultSpecifier(node, opts) {\r\n  assert(\"ExportDefaultSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertRecordExpression(node, opts) {\r\n  assert(\"RecordExpression\", node, opts);\r\n}\r\n\r\nfunction assertTupleExpression(node, opts) {\r\n  assert(\"TupleExpression\", node, opts);\r\n}\r\n\r\nfunction assertDecimalLiteral(node, opts) {\r\n  assert(\"DecimalLiteral\", node, opts);\r\n}\r\n\r\nfunction assertModuleExpression(node, opts) {\r\n  assert(\"ModuleExpression\", node, opts);\r\n}\r\n\r\nfunction assertTopicReference(node, opts) {\r\n  assert(\"TopicReference\", node, opts);\r\n}\r\n\r\nfunction assertPipelineTopicExpression(node, opts) {\r\n  assert(\"PipelineTopicExpression\", node, opts);\r\n}\r\n\r\nfunction assertPipelineBareFunction(node, opts) {\r\n  assert(\"PipelineBareFunction\", node, opts);\r\n}\r\n\r\nfunction assertPipelinePrimaryTopicReference(node, opts) {\r\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\r\n}\r\n\r\nfunction assertTSParameterProperty(node, opts) {\r\n  assert(\"TSParameterProperty\", node, opts);\r\n}\r\n\r\nfunction assertTSDeclareFunction(node, opts) {\r\n  assert(\"TSDeclareFunction\", node, opts);\r\n}\r\n\r\nfunction assertTSDeclareMethod(node, opts) {\r\n  assert(\"TSDeclareMethod\", node, opts);\r\n}\r\n\r\nfunction assertTSQualifiedName(node, opts) {\r\n  assert(\"TSQualifiedName\", node, opts);\r\n}\r\n\r\nfunction assertTSCallSignatureDeclaration(node, opts) {\r\n  assert(\"TSCallSignatureDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSConstructSignatureDeclaration(node, opts) {\r\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSPropertySignature(node, opts) {\r\n  assert(\"TSPropertySignature\", node, opts);\r\n}\r\n\r\nfunction assertTSMethodSignature(node, opts) {\r\n  assert(\"TSMethodSignature\", node, opts);\r\n}\r\n\r\nfunction assertTSIndexSignature(node, opts) {\r\n  assert(\"TSIndexSignature\", node, opts);\r\n}\r\n\r\nfunction assertTSAnyKeyword(node, opts) {\r\n  assert(\"TSAnyKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSBooleanKeyword(node, opts) {\r\n  assert(\"TSBooleanKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSBigIntKeyword(node, opts) {\r\n  assert(\"TSBigIntKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSIntrinsicKeyword(node, opts) {\r\n  assert(\"TSIntrinsicKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSNeverKeyword(node, opts) {\r\n  assert(\"TSNeverKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSNullKeyword(node, opts) {\r\n  assert(\"TSNullKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSNumberKeyword(node, opts) {\r\n  assert(\"TSNumberKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSObjectKeyword(node, opts) {\r\n  assert(\"TSObjectKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSStringKeyword(node, opts) {\r\n  assert(\"TSStringKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSSymbolKeyword(node, opts) {\r\n  assert(\"TSSymbolKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSUndefinedKeyword(node, opts) {\r\n  assert(\"TSUndefinedKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSUnknownKeyword(node, opts) {\r\n  assert(\"TSUnknownKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSVoidKeyword(node, opts) {\r\n  assert(\"TSVoidKeyword\", node, opts);\r\n}\r\n\r\nfunction assertTSThisType(node, opts) {\r\n  assert(\"TSThisType\", node, opts);\r\n}\r\n\r\nfunction assertTSFunctionType(node, opts) {\r\n  assert(\"TSFunctionType\", node, opts);\r\n}\r\n\r\nfunction assertTSConstructorType(node, opts) {\r\n  assert(\"TSConstructorType\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeReference(node, opts) {\r\n  assert(\"TSTypeReference\", node, opts);\r\n}\r\n\r\nfunction assertTSTypePredicate(node, opts) {\r\n  assert(\"TSTypePredicate\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeQuery(node, opts) {\r\n  assert(\"TSTypeQuery\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeLiteral(node, opts) {\r\n  assert(\"TSTypeLiteral\", node, opts);\r\n}\r\n\r\nfunction assertTSArrayType(node, opts) {\r\n  assert(\"TSArrayType\", node, opts);\r\n}\r\n\r\nfunction assertTSTupleType(node, opts) {\r\n  assert(\"TSTupleType\", node, opts);\r\n}\r\n\r\nfunction assertTSOptionalType(node, opts) {\r\n  assert(\"TSOptionalType\", node, opts);\r\n}\r\n\r\nfunction assertTSRestType(node, opts) {\r\n  assert(\"TSRestType\", node, opts);\r\n}\r\n\r\nfunction assertTSNamedTupleMember(node, opts) {\r\n  assert(\"TSNamedTupleMember\", node, opts);\r\n}\r\n\r\nfunction assertTSUnionType(node, opts) {\r\n  assert(\"TSUnionType\", node, opts);\r\n}\r\n\r\nfunction assertTSIntersectionType(node, opts) {\r\n  assert(\"TSIntersectionType\", node, opts);\r\n}\r\n\r\nfunction assertTSConditionalType(node, opts) {\r\n  assert(\"TSConditionalType\", node, opts);\r\n}\r\n\r\nfunction assertTSInferType(node, opts) {\r\n  assert(\"TSInferType\", node, opts);\r\n}\r\n\r\nfunction assertTSParenthesizedType(node, opts) {\r\n  assert(\"TSParenthesizedType\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeOperator(node, opts) {\r\n  assert(\"TSTypeOperator\", node, opts);\r\n}\r\n\r\nfunction assertTSIndexedAccessType(node, opts) {\r\n  assert(\"TSIndexedAccessType\", node, opts);\r\n}\r\n\r\nfunction assertTSMappedType(node, opts) {\r\n  assert(\"TSMappedType\", node, opts);\r\n}\r\n\r\nfunction assertTSLiteralType(node, opts) {\r\n  assert(\"TSLiteralType\", node, opts);\r\n}\r\n\r\nfunction assertTSExpressionWithTypeArguments(node, opts) {\r\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\r\n}\r\n\r\nfunction assertTSInterfaceDeclaration(node, opts) {\r\n  assert(\"TSInterfaceDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSInterfaceBody(node, opts) {\r\n  assert(\"TSInterfaceBody\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeAliasDeclaration(node, opts) {\r\n  assert(\"TSTypeAliasDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSAsExpression(node, opts) {\r\n  assert(\"TSAsExpression\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeAssertion(node, opts) {\r\n  assert(\"TSTypeAssertion\", node, opts);\r\n}\r\n\r\nfunction assertTSEnumDeclaration(node, opts) {\r\n  assert(\"TSEnumDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSEnumMember(node, opts) {\r\n  assert(\"TSEnumMember\", node, opts);\r\n}\r\n\r\nfunction assertTSModuleDeclaration(node, opts) {\r\n  assert(\"TSModuleDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSModuleBlock(node, opts) {\r\n  assert(\"TSModuleBlock\", node, opts);\r\n}\r\n\r\nfunction assertTSImportType(node, opts) {\r\n  assert(\"TSImportType\", node, opts);\r\n}\r\n\r\nfunction assertTSImportEqualsDeclaration(node, opts) {\r\n  assert(\"TSImportEqualsDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSExternalModuleReference(node, opts) {\r\n  assert(\"TSExternalModuleReference\", node, opts);\r\n}\r\n\r\nfunction assertTSNonNullExpression(node, opts) {\r\n  assert(\"TSNonNullExpression\", node, opts);\r\n}\r\n\r\nfunction assertTSExportAssignment(node, opts) {\r\n  assert(\"TSExportAssignment\", node, opts);\r\n}\r\n\r\nfunction assertTSNamespaceExportDeclaration(node, opts) {\r\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeAnnotation(node, opts) {\r\n  assert(\"TSTypeAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeParameterInstantiation(node, opts) {\r\n  assert(\"TSTypeParameterInstantiation\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeParameterDeclaration(node, opts) {\r\n  assert(\"TSTypeParameterDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeParameter(node, opts) {\r\n  assert(\"TSTypeParameter\", node, opts);\r\n}\r\n\r\nfunction assertStandardized(node, opts) {\r\n  assert(\"Standardized\", node, opts);\r\n}\r\n\r\nfunction assertExpression(node, opts) {\r\n  assert(\"Expression\", node, opts);\r\n}\r\n\r\nfunction assertBinary(node, opts) {\r\n  assert(\"Binary\", node, opts);\r\n}\r\n\r\nfunction assertScopable(node, opts) {\r\n  assert(\"Scopable\", node, opts);\r\n}\r\n\r\nfunction assertBlockParent(node, opts) {\r\n  assert(\"BlockParent\", node, opts);\r\n}\r\n\r\nfunction assertBlock(node, opts) {\r\n  assert(\"Block\", node, opts);\r\n}\r\n\r\nfunction assertStatement(node, opts) {\r\n  assert(\"Statement\", node, opts);\r\n}\r\n\r\nfunction assertTerminatorless(node, opts) {\r\n  assert(\"Terminatorless\", node, opts);\r\n}\r\n\r\nfunction assertCompletionStatement(node, opts) {\r\n  assert(\"CompletionStatement\", node, opts);\r\n}\r\n\r\nfunction assertConditional(node, opts) {\r\n  assert(\"Conditional\", node, opts);\r\n}\r\n\r\nfunction assertLoop(node, opts) {\r\n  assert(\"Loop\", node, opts);\r\n}\r\n\r\nfunction assertWhile(node, opts) {\r\n  assert(\"While\", node, opts);\r\n}\r\n\r\nfunction assertExpressionWrapper(node, opts) {\r\n  assert(\"ExpressionWrapper\", node, opts);\r\n}\r\n\r\nfunction assertFor(node, opts) {\r\n  assert(\"For\", node, opts);\r\n}\r\n\r\nfunction assertForXStatement(node, opts) {\r\n  assert(\"ForXStatement\", node, opts);\r\n}\r\n\r\nfunction assertFunction(node, opts) {\r\n  assert(\"Function\", node, opts);\r\n}\r\n\r\nfunction assertFunctionParent(node, opts) {\r\n  assert(\"FunctionParent\", node, opts);\r\n}\r\n\r\nfunction assertPureish(node, opts) {\r\n  assert(\"Pureish\", node, opts);\r\n}\r\n\r\nfunction assertDeclaration(node, opts) {\r\n  assert(\"Declaration\", node, opts);\r\n}\r\n\r\nfunction assertPatternLike(node, opts) {\r\n  assert(\"PatternLike\", node, opts);\r\n}\r\n\r\nfunction assertLVal(node, opts) {\r\n  assert(\"LVal\", node, opts);\r\n}\r\n\r\nfunction assertTSEntityName(node, opts) {\r\n  assert(\"TSEntityName\", node, opts);\r\n}\r\n\r\nfunction assertLiteral(node, opts) {\r\n  assert(\"Literal\", node, opts);\r\n}\r\n\r\nfunction assertImmutable(node, opts) {\r\n  assert(\"Immutable\", node, opts);\r\n}\r\n\r\nfunction assertUserWhitespacable(node, opts) {\r\n  assert(\"UserWhitespacable\", node, opts);\r\n}\r\n\r\nfunction assertMethod(node, opts) {\r\n  assert(\"Method\", node, opts);\r\n}\r\n\r\nfunction assertObjectMember(node, opts) {\r\n  assert(\"ObjectMember\", node, opts);\r\n}\r\n\r\nfunction assertProperty(node, opts) {\r\n  assert(\"Property\", node, opts);\r\n}\r\n\r\nfunction assertUnaryLike(node, opts) {\r\n  assert(\"UnaryLike\", node, opts);\r\n}\r\n\r\nfunction assertPattern(node, opts) {\r\n  assert(\"Pattern\", node, opts);\r\n}\r\n\r\nfunction assertClass(node, opts) {\r\n  assert(\"Class\", node, opts);\r\n}\r\n\r\nfunction assertModuleDeclaration(node, opts) {\r\n  assert(\"ModuleDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertExportDeclaration(node, opts) {\r\n  assert(\"ExportDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertModuleSpecifier(node, opts) {\r\n  assert(\"ModuleSpecifier\", node, opts);\r\n}\r\n\r\nfunction assertPrivate(node, opts) {\r\n  assert(\"Private\", node, opts);\r\n}\r\n\r\nfunction assertFlow(node, opts) {\r\n  assert(\"Flow\", node, opts);\r\n}\r\n\r\nfunction assertFlowType(node, opts) {\r\n  assert(\"FlowType\", node, opts);\r\n}\r\n\r\nfunction assertFlowBaseAnnotation(node, opts) {\r\n  assert(\"FlowBaseAnnotation\", node, opts);\r\n}\r\n\r\nfunction assertFlowDeclaration(node, opts) {\r\n  assert(\"FlowDeclaration\", node, opts);\r\n}\r\n\r\nfunction assertFlowPredicate(node, opts) {\r\n  assert(\"FlowPredicate\", node, opts);\r\n}\r\n\r\nfunction assertEnumBody(node, opts) {\r\n  assert(\"EnumBody\", node, opts);\r\n}\r\n\r\nfunction assertEnumMember(node, opts) {\r\n  assert(\"EnumMember\", node, opts);\r\n}\r\n\r\nfunction assertJSX(node, opts) {\r\n  assert(\"JSX\", node, opts);\r\n}\r\n\r\nfunction assertMiscellaneous(node, opts) {\r\n  assert(\"Miscellaneous\", node, opts);\r\n}\r\n\r\nfunction assertTypeScript(node, opts) {\r\n  assert(\"TypeScript\", node, opts);\r\n}\r\n\r\nfunction assertTSTypeElement(node, opts) {\r\n  assert(\"TSTypeElement\", node, opts);\r\n}\r\n\r\nfunction assertTSType(node, opts) {\r\n  assert(\"TSType\", node, opts);\r\n}\r\n\r\nfunction assertTSBaseType(node, opts) {\r\n  assert(\"TSBaseType\", node, opts);\r\n}\r\n\r\nfunction assertNumberLiteral(node, opts) {\r\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\r\n  assert(\"NumberLiteral\", node, opts);\r\n}\r\n\r\nfunction assertRegexLiteral(node, opts) {\r\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\r\n  assert(\"RegexLiteral\", node, opts);\r\n}\r\n\r\nfunction assertRestProperty(node, opts) {\r\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\r\n  assert(\"RestProperty\", node, opts);\r\n}\r\n\r\nfunction assertSpreadProperty(node, opts) {\r\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\r\n  assert(\"SpreadProperty\", node, opts);\r\n}"]},"metadata":{},"sourceType":"script"}